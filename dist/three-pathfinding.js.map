{"version":3,"file":"three-pathfinding.js","sources":["../src/Utils.js","../src/BinaryHeap.js","../src/Channel.js","../src/Pathfinding.js","../src/Builder.js","../src/AStar.js","../src/PathfindingHelper.js"],"sourcesContent":["class Utils {\n\n  static roundNumber (value, decimals) {\n    const factor = Math.pow(10, decimals);\n    return Math.round(value * factor) / factor;\n  }\n\n  static sample (list) {\n    return list[Math.floor(Math.random() * list.length)];\n  }\n\n  static distanceToSquared (a, b) {\n\n    var dx = a.x - b.x;\n    var dy = a.y - b.y;\n    var dz = a.z - b.z;\n\n    return dx * dx + dy * dy + dz * dz;\n\n  }\n\n  //+ Jonas Raoni Soares Silva\n  //@ http://jsfromhell.com/math/is-point-in-poly [rev. #0]\n  static isPointInPoly (poly, pt) {\n    for (var c = false, i = -1, l = poly.length, j = l - 1; ++i < l; j = i)\n      ((poly[i].z <= pt.z && pt.z < poly[j].z) || (poly[j].z <= pt.z && pt.z < poly[i].z)) && (pt.x < (poly[j].x - poly[i].x) * (pt.z - poly[i].z) / (poly[j].z - poly[i].z) + poly[i].x) && (c = !c);\n    return c;\n  }\n\n  static isVectorInPolygon (vector, polygon, vertices) {\n\n    // reference point will be the centroid of the polygon\n    // We need to rotate the vector as well as all the points which the polygon uses\n\n    var lowestPoint = 100000;\n    var highestPoint = -100000;\n\n    var polygonVertices = [];\n\n    polygon.vertexIds.forEach((vId) => {\n      lowestPoint = Math.min(vertices[vId].y, lowestPoint);\n      highestPoint = Math.max(vertices[vId].y, highestPoint);\n      polygonVertices.push(vertices[vId]);\n    });\n\n    if (vector.y < highestPoint + 0.5 && vector.y > lowestPoint - 0.5 &&\n      this.isPointInPoly(polygonVertices, vector)) {\n      return true;\n    }\n    return false;\n  }\n\n  static triarea2 (a, b, c) {\n    var ax = b.x - a.x;\n    var az = b.z - a.z;\n    var bx = c.x - a.x;\n    var bz = c.z - a.z;\n    return bx * az - ax * bz;\n  }\n\n  static vequal (a, b) {\n    return this.distanceToSquared(a, b) < 0.00001;\n  }\n}\n\nexport { Utils };\n","// javascript-astar\n// http://github.com/bgrins/javascript-astar\n// Freely distributable under the MIT License.\n// Implements the astar search algorithm in javascript using a binary heap.\n\nclass BinaryHeap {\n  constructor (scoreFunction) {\n    this.content = [];\n    this.scoreFunction = scoreFunction;\n  }\n\n  push (element) {\n    // Add the new element to the end of the array.\n    this.content.push(element);\n\n    // Allow it to sink down.\n    this.sinkDown(this.content.length - 1);\n  }\n\n  pop () {\n    // Store the first element so we can return it later.\n    const result = this.content[0];\n    // Get the element at the end of the array.\n    const end = this.content.pop();\n    // If there are any elements left, put the end element at the\n    // start, and let it bubble up.\n    if (this.content.length > 0) {\n      this.content[0] = end;\n      this.bubbleUp(0);\n    }\n    return result;\n  }\n\n  remove (node) {\n    const i = this.content.indexOf(node);\n\n    // When it is found, the process seen in 'pop' is repeated\n    // to fill up the hole.\n    const end = this.content.pop();\n\n    if (i !== this.content.length - 1) {\n      this.content[i] = end;\n\n      if (this.scoreFunction(end) < this.scoreFunction(node)) {\n        this.sinkDown(i);\n      } else {\n        this.bubbleUp(i);\n      }\n    }\n  }\n\n  size () {\n    return this.content.length;\n  }\n\n  rescoreElement (node) {\n    this.sinkDown(this.content.indexOf(node));\n  }\n\n  sinkDown (n) {\n    // Fetch the element that has to be sunk.\n    const element = this.content[n];\n\n    // When at 0, an element can not sink any further.\n    while (n > 0) {\n      // Compute the parent element's index, and fetch it.\n      const parentN = ((n + 1) >> 1) - 1;\n      const parent = this.content[parentN];\n\n      if (this.scoreFunction(element) < this.scoreFunction(parent)) {\n        // Swap the elements if the parent is greater.\n        this.content[parentN] = element;\n        this.content[n] = parent;\n        // Update 'n' to continue at the new position.\n        n = parentN;\n      } else {\n        // Found a parent that is less, no need to sink any further.\n        break;\n      }\n    }\n  }\n\n  bubbleUp (n) {\n    // Look up the target element and its score.\n    const length = this.content.length,\n      element = this.content[n],\n      elemScore = this.scoreFunction(element);\n\n    while (true) {\n      // Compute the indices of the child elements.\n      const child2N = (n + 1) << 1,\n        child1N = child2N - 1;\n      // This is used to store the new position of the element,\n      // if any.\n      let swap = null;\n      let child1Score;\n      // If the first child exists (is inside the array)...\n      if (child1N < length) {\n        // Look it up and compute its score.\n        const child1 = this.content[child1N];\n        child1Score = this.scoreFunction(child1);\n\n        // If the score is less than our element's, we need to swap.\n        if (child1Score < elemScore) {\n          swap = child1N;\n        }\n      }\n\n      // Do the same checks for the other child.\n      if (child2N < length) {\n        const child2 = this.content[child2N],\n          child2Score = this.scoreFunction(child2);\n        if (child2Score < (swap === null ? elemScore : child1Score)) {\n          swap = child2N;\n        }\n      }\n\n      // If the element needs to be moved, swap it, and continue.\n      if (swap !== null) {\n        this.content[n] = this.content[swap];\n        this.content[swap] = element;\n        n = swap;\n      }\n\n      // Otherwise, we are done.\n      else {\n        break;\n      }\n    }\n  }\n\n}\n\nexport { BinaryHeap };\n","import { Utils } from './Utils';\n\nclass Channel {\n  constructor () {\n    this.portals = [];\n  }\n\n  push (p1, p2) {\n    if (p2 === undefined) p2 = p1;\n    this.portals.push({\n      left: p1,\n      right: p2\n    });\n  }\n\n  stringPull () {\n    const portals = this.portals;\n    const pts = [];\n    // Init scan state\n    let portalApex, portalLeft, portalRight;\n    let apexIndex = 0,\n      leftIndex = 0,\n      rightIndex = 0;\n\n    portalApex = portals[0].left;\n    portalLeft = portals[0].left;\n    portalRight = portals[0].right;\n\n    // Add start point.\n    pts.push(portalApex);\n\n    for (let i = 1; i < portals.length; i++) {\n      const left = portals[i].left;\n      const right = portals[i].right;\n\n      // Update right vertex.\n      if (Utils.triarea2(portalApex, portalRight, right) <= 0.0) {\n        if (Utils.vequal(portalApex, portalRight) || Utils.triarea2(portalApex, portalLeft, right) > 0.0) {\n          // Tighten the funnel.\n          portalRight = right;\n          rightIndex = i;\n        } else {\n          // Right over left, insert left to path and restart scan from portal left point.\n          pts.push(portalLeft);\n          // Make current left the new apex.\n          portalApex = portalLeft;\n          apexIndex = leftIndex;\n          // Reset portal\n          portalLeft = portalApex;\n          portalRight = portalApex;\n          leftIndex = apexIndex;\n          rightIndex = apexIndex;\n          // Restart scan\n          i = apexIndex;\n          continue;\n        }\n      }\n\n      // Update left vertex.\n      if (Utils.triarea2(portalApex, portalLeft, left) >= 0.0) {\n        if (Utils.vequal(portalApex, portalLeft) || Utils.triarea2(portalApex, portalRight, left) < 0.0) {\n          // Tighten the funnel.\n          portalLeft = left;\n          leftIndex = i;\n        } else {\n          // Left over right, insert right to path and restart scan from portal right point.\n          pts.push(portalRight);\n          // Make current right the new apex.\n          portalApex = portalRight;\n          apexIndex = rightIndex;\n          // Reset portal\n          portalLeft = portalApex;\n          portalRight = portalApex;\n          leftIndex = apexIndex;\n          rightIndex = apexIndex;\n          // Restart scan\n          i = apexIndex;\n          continue;\n        }\n      }\n    }\n\n    if ((pts.length === 0) || (!Utils.vequal(pts[pts.length - 1], portals[portals.length - 1].left))) {\n      // Append last point to path.\n      pts.push(portals[portals.length - 1].left);\n    }\n\n    this.path = pts;\n    return pts;\n  }\n}\n\nexport { Channel };\n","import {\n\tVector3,\n\tPlane,\n\tBufferGeometry,\n\tGeometry,\n\tTriangle,\n} from 'three';\n\nimport { Utils } from './Utils';\nimport { AStar } from './AStar';\nimport { Builder } from './Builder';\nimport { Channel } from './Channel';\n\n/**\n * Defines an instance of the pathfinding module, with one or more zones.\n */\nclass Pathfinding {\n\tconstructor () {\n\t\tthis.zones = {};\n\t}\n\n\t/**\n\t * (Static) Builds a zone/node set from navigation mesh geometry.\n\t * @param  {BufferGeometry} geometry\n\t * @return {Zone}\n\t */\n\tstatic createZone (geometry) {\n\t\tif ( geometry.isGeometry ) {\n\t\t\t// Haven't actually implemented support for BufferGeometry yet, but Geometry is somewhat\n\t\t\t// not-recommended these days, so go ahead and start warning.\n\t\t\tconsole.warn('[three-pathfinding]: Use BufferGeometry, not Geometry, to create zone.');\n\t\t} else {\n\t\t\tgeometry = new Geometry().fromBufferGeometry(geometry);\n\t\t}\n\n\t\treturn Builder.buildZone(geometry);\n\t}\n\n\t/**\n\t * Sets data for the given zone.\n\t * @param {string} zoneID\n\t * @param {Zone} zone\n\t */\n\tsetZoneData (zoneID, zone) {\n\t\tthis.zones[zoneID] = zone;\n\t}\n\n\t/**\n\t * Returns a random node within a given range of a given position.\n\t * @param  {string} zoneID\n\t * @param  {number} groupID\n\t * @param  {Vector3} nearPosition\n\t * @param  {number} nearRange\n\t * @return {Node}\n\t */\n\tgetRandomNode (zoneID, groupID, nearPosition, nearRange) {\n\n\t\tif (!this.zones[zoneID]) return new Vector3();\n\n\t\tnearPosition = nearPosition || null;\n\t\tnearRange = nearRange || 0;\n\n\t\tconst candidates = [];\n\t\tconst polygons = this.zones[zoneID].groups[groupID];\n\n\t\tpolygons.forEach((p) => {\n\t\t\tif (nearPosition && nearRange) {\n\t\t\t\tif (Utils.distanceToSquared(nearPosition, p.centroid) < nearRange * nearRange) {\n\t\t\t\t\tcandidates.push(p.centroid);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcandidates.push(p.centroid);\n\t\t\t}\n\t\t});\n\n\t\treturn Utils.sample(candidates) || new Vector3();\n\t}\n\n\t/**\n\t * Returns the closest node to the target position.\n\t * @param  {Vector3} position\n\t * @param  {string}  zoneID\n\t * @param  {number}  groupID\n\t * @param  {boolean} checkPolygon\n\t * @return {Node}\n\t */\n\tgetClosestNode (position, zoneID, groupID, checkPolygon = false) {\n\t\tconst nodes = this.zones[zoneID].groups[groupID];\n\t\tconst vertices = this.zones[zoneID].vertices;\n\t\tlet closestNode = null;\n\t\tlet closestDistance = Infinity;\n\n\t\tnodes.forEach((node) => {\n\t\t\tconst distance = Utils.distanceToSquared(node.centroid, position);\n\t\t\tif (distance < closestDistance\n\t\t\t\t\t&& (!checkPolygon || Utils.isVectorInPolygon(position, node, vertices))) {\n\t\t\t\tclosestNode = node;\n\t\t\t\tclosestDistance = distance;\n\t\t\t}\n\t\t});\n\n\t\treturn closestNode;\n\t}\n\n\t/**\n\t * Returns a path between given start and end points. If a complete path\n\t * cannot be found, will return the nearest endpoint available.\n\t *\n\t * @param  {Vector3} startPosition Start position.\n\t * @param  {Vector3} targetPosition Destination.\n\t * @param  {string} zoneID ID of current zone.\n\t * @param  {number} groupID Current group ID.\n\t * @return {Array<Vector3>} Array of points defining the path.\n\t */\n\tfindPath (startPosition, targetPosition, zoneID, groupID) {\n\t\tconst nodes = this.zones[zoneID].groups[groupID];\n\t\tconst vertices = this.zones[zoneID].vertices;\n\n\t\tconst closestNode = this.getClosestNode(startPosition, zoneID, groupID, true);\n\t\tconst farthestNode = this.getClosestNode(targetPosition, zoneID, groupID, true);\n\n\t\t// If we can't find any node, just go straight to the target\n\t\tif (!closestNode || !farthestNode) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst paths = AStar.search(nodes, closestNode, farthestNode);\n\n\t\tconst getPortalFromTo = function (a, b) {\n\t\t\tfor (var i = 0; i < a.neighbours.length; i++) {\n\t\t\t\tif (a.neighbours[i] === b.id) {\n\t\t\t\t\treturn a.portals[i];\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t// We have the corridor, now pull the rope.\n\t\tconst channel = new Channel();\n\t\tchannel.push(startPosition);\n\t\tfor (let i = 0; i < paths.length; i++) {\n\t\t\tconst polygon = paths[i];\n\t\t\tconst nextPolygon = paths[i + 1];\n\n\t\t\tif (nextPolygon) {\n\t\t\t\tconst portals = getPortalFromTo(polygon, nextPolygon);\n\t\t\t\tchannel.push(\n\t\t\t\t\tvertices[portals[0]],\n\t\t\t\t\tvertices[portals[1]]\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\tchannel.push(targetPosition);\n\t\tchannel.stringPull();\n\n\t\t// Return the path, omitting first position (which is already known).\n\t\tconst path = channel.path.map((c) => new Vector3(c.x, c.y, c.z));\n\t\tpath.shift();\n\t\treturn path;\n\t}\n}\n\n/**\n * Returns closest node group ID for given position.\n * @param  {string} zoneID\n * @param  {Vector3} position\n * @return {number}\n */\nPathfinding.prototype.getGroup = (function() {\n\tconst plane = new Plane();\n\treturn function (zoneID, position, checkPolygon = false) {\n\t\tif (!this.zones[zoneID]) return null;\n\n\t\tlet closestNodeGroup = null;\n\t\tlet distance = Math.pow(50, 2);\n\t\tconst zone = this.zones[zoneID];\n\n\t\tfor (let i = 0; i < zone.groups.length; i++) {\n\t\t\tconst group = zone.groups[i];\n\t\t\tfor (const node of group) {\n\t\t\t\tif (checkPolygon) {\n\t\t\t\t\tplane.setFromCoplanarPoints(\n\t\t\t\t\t\tzone.vertices[node.vertexIds[0]],\n\t\t\t\t\t\tzone.vertices[node.vertexIds[1]],\n\t\t\t\t\t\tzone.vertices[node.vertexIds[2]]\n\t\t\t\t\t);\n\t\t\t\t\tif (Math.abs(plane.distanceToPoint(position)) < 0.01) {\n\t\t\t\t\t\tconst poly = [\n\t\t\t\t\t\t\tzone.vertices[node.vertexIds[0]],\n\t\t\t\t\t\t\tzone.vertices[node.vertexIds[1]],\n\t\t\t\t\t\t\tzone.vertices[node.vertexIds[2]]\n\t\t\t\t\t\t];\n\t\t\t\t\t\tif(Utils.isPointInPoly(poly, position)) {\n\t\t\t\t\t\t\treturn i;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tconst measuredDistance = Utils.distanceToSquared(node.centroid, position);\n\t\t\t\tif (measuredDistance < distance) {\n\t\t\t\t\tclosestNodeGroup = i;\n\t\t\t\t\tdistance = measuredDistance;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn closestNodeGroup;\n\t};\n}());\n\n/**\n * Clamps a step along the navmesh, given start and desired endpoint. May be\n * used to constrain first-person / WASD controls.\n *\n * @param  {Vector3} start\n * @param  {Vector3} end Desired endpoint.\n * @param  {Node} node\n * @param  {string} zoneID\n * @param  {number} groupID\n * @param  {Vector3} endTarget Updated endpoint.\n * @return {Node} Updated node.\n */\nPathfinding.prototype.clampStep = (function () {\n\tconst point = new Vector3();\n\tconst plane = new Plane();\n\tconst triangle = new Triangle();\n\n\tconst endPoint = new Vector3();\n\n\tlet closestNode;\n\tlet closestPoint = new Vector3();\n\tlet closestDistance;\n\n\treturn function (startRef, endRef, node, zoneID, groupID, endTarget) {\n\t\tconst vertices = this.zones[zoneID].vertices;\n\t\tconst nodes = this.zones[zoneID].groups[groupID];\n\n\t\tconst nodeQueue = [node];\n\t\tconst nodeDepth = {};\n\t\tnodeDepth[node.id] = 0;\n\n\t\tclosestNode = undefined;\n\t\tclosestPoint.set(0, 0, 0);\n\t\tclosestDistance = Infinity;\n\n\t\t// Project the step along the current node.\n\t\tplane.setFromCoplanarPoints(\n\t\t\tvertices[node.vertexIds[0]],\n\t\t\tvertices[node.vertexIds[1]],\n\t\t\tvertices[node.vertexIds[2]]\n\t\t);\n\t\tplane.projectPoint(endRef, point);\n\t\tendPoint.copy(point);\n\n\t\tfor (let currentNode = nodeQueue.pop(); currentNode; currentNode = nodeQueue.pop()) {\n\n\t\t\ttriangle.set(\n\t\t\t\tvertices[currentNode.vertexIds[0]],\n\t\t\t\tvertices[currentNode.vertexIds[1]],\n\t\t\t\tvertices[currentNode.vertexIds[2]]\n\t\t\t);\n\n\t\t\ttriangle.closestPointToPoint(endPoint, point);\n\n\t\t\tif (point.distanceToSquared(endPoint) < closestDistance) {\n\t\t\t\tclosestNode = currentNode;\n\t\t\t\tclosestPoint.copy(point);\n\t\t\t\tclosestDistance = point.distanceToSquared(endPoint);\n\t\t\t}\n\n\t\t\tconst depth = nodeDepth[currentNode.id];\n\t\t\tif (depth > 2) continue;\n\n\t\t\tfor (let i = 0; i < currentNode.neighbours.length; i++) {\n\t\t\t\tconst neighbour = nodes[currentNode.neighbours[i]];\n\t\t\t\tif (neighbour.id in nodeDepth) continue;\n\n\t\t\t\tnodeQueue.push(neighbour);\n\t\t\t\tnodeDepth[neighbour.id] = depth + 1;\n\t\t\t}\n\t\t}\n\n\t\tendTarget.copy(closestPoint);\n\t\treturn closestNode;\n\t};\n}());\n\n/**\n * Defines a zone of interconnected groups on a navigation mesh.\n *\n * @type {Object}\n * @property {Array<Group>} groups\n * @property {Array<Vector3>} vertices\n */\nconst Zone = {}; // jshint ignore:line\n\n/**\n * Defines a group within a navigation mesh.\n *\n * @type {Object}\n */\nconst Group = {}; // jshint ignore:line\n\n/**\n * Defines a node (or polygon) within a group.\n *\n * @type {Object}\n * @property {number} id\n * @property {Array<number>} neighbours IDs of neighboring nodes.\n * @property {Array<number>} vertexIds\n * @property {Vector3} centroid\n * @property {Array<Array<number>>} portals Array of portals, each defined by two vertex IDs.\n * @property {boolean} closed\n * @property {number} cost\n */\nconst Node = {}; // jshint ignore:line\n\nexport { Pathfinding };\n","import {\n  Vector3,\n} from 'three';\n\nimport { Utils } from './Utils';\n\nclass Builder {\n  /**\n   * Constructs groups from the given navigation mesh.\n   * @param  {Geometry} geometry\n   * @return {Zone}\n   */\n  static buildZone (geometry) {\n\n    const navMesh = this._buildNavigationMesh(geometry);\n\n    const zone = {};\n\n    navMesh.vertices.forEach((v) => {\n      v.x = Utils.roundNumber(v.x, 2);\n      v.y = Utils.roundNumber(v.y, 2);\n      v.z = Utils.roundNumber(v.z, 2);\n    });\n\n    zone.vertices = navMesh.vertices;\n\n    const groups = this._buildPolygonGroups(navMesh);\n\n    // TODO: This block represents a large portion of navigation mesh construction time\n    // and could probably be optimized. For example, construct portals while\n    // determining the neighbor graph.\n    zone.groups = new Array(groups.length);\n    groups.forEach((group, groupIndex) => {\n\n      const indexByPolygon = new Map(); // { polygon: index in group }\n      group.forEach((poly, polyIndex) => { indexByPolygon.set(poly, polyIndex); });\n\n      const newGroup = new Array(group.length);\n      group.forEach((poly, polyIndex) => {\n\n        const neighbourIndices = [];\n        poly.neighbours.forEach((n) => neighbourIndices.push(indexByPolygon.get(n)));\n\n        // Build a portal list to each neighbour\n        const portals = [];\n        poly.neighbours.forEach((n) => portals.push(this._getSharedVerticesInOrder(poly, n)));\n\n        const centroid = new Vector3( 0, 0, 0 );\n        centroid.add( zone.vertices[ poly.vertexIds[0] ] );\n        centroid.add( zone.vertices[ poly.vertexIds[1] ] );\n        centroid.add( zone.vertices[ poly.vertexIds[2] ] );\n        centroid.divideScalar( 3 );\n        centroid.x = Utils.roundNumber(centroid.x, 2);\n        centroid.y = Utils.roundNumber(centroid.y, 2);\n        centroid.z = Utils.roundNumber(centroid.z, 2);\n\n        newGroup[polyIndex] = {\n          id: polyIndex,\n          neighbours: neighbourIndices,\n          vertexIds: poly.vertexIds,\n          centroid: centroid,\n          portals: portals\n        };\n      });\n\n      zone.groups[groupIndex] = newGroup;\n    });\n\n    return zone;\n  }\n\n  /**\n   * Constructs a navigation mesh from the given geometry.\n   * @param {Geometry} geometry\n   * @return {Object}\n   */\n  static _buildNavigationMesh (geometry) {\n    geometry.mergeVertices();\n    return this._buildPolygonsFromGeometry(geometry);\n  }\n\n  static _buildPolygonGroups (navigationMesh) {\n\n    const polygons = navigationMesh.polygons;\n\n    const polygonGroups = [];\n\n    const spreadGroupId = function (polygon) {\n      polygon.neighbours.forEach((neighbour) => {\n        if (neighbour.group === undefined) {\n          neighbour.group = polygon.group;\n          spreadGroupId(neighbour);\n        }\n      });\n    };\n\n    polygons.forEach((polygon) => {\n      if (polygon.group !== undefined) {\n        // this polygon is already part of a group\n        polygonGroups[polygon.group].push(polygon);\n      } else {\n        // we need to make a new group and spread its ID to neighbors\n        polygon.group = polygonGroups.length;\n        spreadGroupId(polygon);\n        polygonGroups.push([polygon]);\n      }\n    });\n\n    return polygonGroups;\n  }\n\n  static _buildPolygonNeighbours (polygon, vertexPolygonMap) {\n    const neighbours = new Set();\n\n    const groupA = vertexPolygonMap[polygon.vertexIds[0]];\n    const groupB = vertexPolygonMap[polygon.vertexIds[1]];\n    const groupC = vertexPolygonMap[polygon.vertexIds[2]];\n\n    // It's only necessary to iterate groups A and B. Polygons contained only\n    // in group C cannot share a >1 vertex with this polygon.\n    // IMPORTANT: Bublé cannot compile for-of loops.\n    groupA.forEach((candidate) => {\n      if (candidate === polygon) return;\n      if (groupB.includes(candidate) || groupC.includes(candidate)) {\n        neighbours.add(candidate);\n      }\n    });\n    groupB.forEach((candidate) => {\n      if (candidate === polygon) return;\n      if (groupC.includes(candidate)) {\n        neighbours.add(candidate);\n      }\n    });\n\n    return neighbours;\n  }\n\n  static _buildPolygonsFromGeometry (geometry) {\n\n    const polygons = [];\n    const vertices = geometry.vertices;\n\n    // Constructing the neighbor graph brute force is O(n²). To avoid that,\n    // create a map from vertices to the polygons that contain them, and use it\n    // while connecting polygons. This reduces complexity to O(n*m), where 'm'\n    // is related to connectivity of the mesh.\n    const vertexPolygonMap = new Array(vertices.length); // array of polygon objects by vertex index\n    for (let i = 0; i < vertices.length; i++) {\n      vertexPolygonMap[i] = [];\n    }\n\n    // Convert the faces into a custom format that supports more than 3 vertices\n    geometry.faces.forEach((face) => {\n      const poly = { vertexIds: [face.a, face.b, face.c], neighbours: null };\n      polygons.push(poly);\n      vertexPolygonMap[face.a].push(poly);\n      vertexPolygonMap[face.b].push(poly);\n      vertexPolygonMap[face.c].push(poly);\n    });\n\n    // Build a list of adjacent polygons\n    polygons.forEach((polygon) => {\n      polygon.neighbours = this._buildPolygonNeighbours(polygon, vertexPolygonMap);\n    });\n\n    return {\n      polygons: polygons,\n      vertices: vertices\n    };\n  }\n\n  static _getSharedVerticesInOrder (a, b) {\n\n    const aList = a.vertexIds;\n    const a0 = aList[0], a1 = aList[1], a2 = aList[2];\n\n    const bList = b.vertexIds;\n    const shared0 = bList.includes(a0);\n    const shared1 = bList.includes(a1);\n    const shared2 = bList.includes(a2);\n\n    // it seems that we shouldn't have an a and b with <2 shared vertices here unless there's a bug\n    // in the neighbor identification code, or perhaps a malformed input geometry; 3 shared vertices\n    // is a kind of embarrassing but possible geometry we should handle\n    if (shared0 && shared1 && shared2) {\n      return Array.from(aList);\n    } else if (shared0 && shared1) {\n      return [a0, a1];\n    } else if (shared1 && shared2) {\n      return [a1, a2];\n    } else if (shared0 && shared2) {\n      return [a2, a0]; // this ordering will affect the string pull algorithm later, not clear if significant\n    } else {\n      console.warn(\"Error processing navigation mesh neighbors; neighbors with <2 shared vertices found.\");\n      return [];\n    }\n  }\n}\n\nexport { Builder };\n","import { BinaryHeap } from './BinaryHeap';\nimport { Utils } from './Utils.js';\n\nclass AStar {\n  static init (graph) {\n    for (let x = 0; x < graph.length; x++) {\n      //for(var x in graph) {\n      const node = graph[x];\n      node.f = 0;\n      node.g = 0;\n      node.h = 0;\n      node.cost = 1.0;\n      node.visited = false;\n      node.closed = false;\n      node.parent = null;\n    }\n  }\n\n  static cleanUp (graph) {\n    for (let x = 0; x < graph.length; x++) {\n      const node = graph[x];\n      delete node.f;\n      delete node.g;\n      delete node.h;\n      delete node.cost;\n      delete node.visited;\n      delete node.closed;\n      delete node.parent;\n    }\n  }\n\n  static heap () {\n    return new BinaryHeap(function (node) {\n      return node.f;\n    });\n  }\n\n  static search (graph, start, end) {\n    this.init(graph);\n    //heuristic = heuristic || astar.manhattan;\n\n\n    const openHeap = this.heap();\n\n    openHeap.push(start);\n\n    while (openHeap.size() > 0) {\n\n      // Grab the lowest f(x) to process next.  Heap keeps this sorted for us.\n      const currentNode = openHeap.pop();\n\n      // End case -- result has been found, return the traced path.\n      if (currentNode === end) {\n        let curr = currentNode;\n        const ret = [];\n        while (curr.parent) {\n          ret.push(curr);\n          curr = curr.parent;\n        }\n        this.cleanUp(ret);\n        return ret.reverse();\n      }\n\n      // Normal case -- move currentNode from open to closed, process each of its neighbours.\n      currentNode.closed = true;\n\n      // Find all neighbours for the current node. Optionally find diagonal neighbours as well (false by default).\n      const neighbours = this.neighbours(graph, currentNode);\n\n      for (let i = 0, il = neighbours.length; i < il; i++) {\n        const neighbour = neighbours[i];\n\n        if (neighbour.closed) {\n          // Not a valid node to process, skip to next neighbour.\n          continue;\n        }\n\n        // The g score is the shortest distance from start to current node.\n        // We need to check if the path we have arrived at this neighbour is the shortest one we have seen yet.\n        const gScore = currentNode.g + neighbour.cost;\n        const beenVisited = neighbour.visited;\n\n        if (!beenVisited || gScore < neighbour.g) {\n\n          // Found an optimal (so far) path to this node.  Take score for node to see how good it is.\n          neighbour.visited = true;\n          neighbour.parent = currentNode;\n          if (!neighbour.centroid || !end.centroid) throw new Error('Unexpected state');\n          neighbour.h = neighbour.h || this.heuristic(neighbour.centroid, end.centroid);\n          neighbour.g = gScore;\n          neighbour.f = neighbour.g + neighbour.h;\n\n          if (!beenVisited) {\n            // Pushing to heap will put it in proper place based on the 'f' value.\n            openHeap.push(neighbour);\n          } else {\n            // Already seen the node, but since it has been rescored we need to reorder it in the heap\n            openHeap.rescoreElement(neighbour);\n          }\n        }\n      }\n    }\n\n    // No result was found - empty array signifies failure to find path.\n    return [];\n  }\n\n  static heuristic (pos1, pos2) {\n    return Utils.distanceToSquared(pos1, pos2);\n  }\n\n  static neighbours (graph, node) {\n    const ret = [];\n\n    for (let e = 0; e < node.neighbours.length; e++) {\n      ret.push(graph[node.neighbours[e]]);\n    }\n\n    return ret;\n  }\n}\n\nexport { AStar };\n","import {\r\n  Color,\r\n  Object3D,\r\n  LineBasicMaterial,\r\n  MeshBasicMaterial,\r\n  SphereBufferGeometry,\r\n  BoxGeometry,\r\n  Mesh,\r\n  SphereGeometry,\r\n  Geometry,\r\n  Vector3,\r\n  Line,\r\n} from 'three';\r\n\r\nconst colors = {\r\n  PLAYER: new Color( 0xee836f ).convertGammaToLinear( 2.2 ).getHex(),\r\n  TARGET: new Color( 0xdccb18 ).convertGammaToLinear( 2.2 ).getHex(),\r\n  PATH: new Color( 0x00a3af ).convertGammaToLinear( 2.2 ).getHex(),\r\n  WAYPOINT: new Color( 0x00a3af ).convertGammaToLinear( 2.2 ).getHex(),\r\n  CLAMPED_STEP: new Color( 0xdcd3b2 ).convertGammaToLinear( 2.2 ).getHex(),\r\n  CLOSEST_NODE: new Color( 0x43676b ).convertGammaToLinear( 2.2 ).getHex(),\r\n};\r\n\r\nconst OFFSET = 0.2;\r\n\r\n/**\r\n * Helper for debugging pathfinding behavior.\r\n */\r\nclass PathfindingHelper extends Object3D {\r\n  constructor () {\r\n    super();\r\n\r\n    this._playerMarker = new Mesh(\r\n      new SphereGeometry( 0.25, 32, 32 ),\r\n      new MeshBasicMaterial( { color: colors.PLAYER } )\r\n    );\r\n\r\n    this._targetMarker = new Mesh(\r\n      new BoxGeometry( 0.3, 0.3, 0.3 ),\r\n      new MeshBasicMaterial( { color: colors.TARGET } )\r\n    );\r\n    \r\n\r\n    this._nodeMarker = new Mesh(\r\n      new BoxGeometry( 0.1, 0.8, 0.1 ),\r\n      new MeshBasicMaterial( { color: colors.CLOSEST_NODE } )\r\n    );\r\n    \r\n\r\n    this._stepMarker = new Mesh(\r\n      new BoxGeometry( 0.1, 1, 0.1 ),\r\n      new MeshBasicMaterial( { color: colors.CLAMPED_STEP } )\r\n    );\r\n\r\n    this._pathMarker = new Object3D();\r\n\r\n    this._pathLineMaterial = new LineBasicMaterial( { color: colors.PATH, linewidth: 2 } ) ;\r\n    this._pathPointMaterial = new MeshBasicMaterial( { color: colors.WAYPOINT } );\r\n    this._pathPointGeometry = new SphereBufferGeometry( 0.08 );\r\n\r\n    this._markers = [\r\n      this._playerMarker,\r\n      this._targetMarker,\r\n      this._nodeMarker,\r\n      this._stepMarker,\r\n      this._pathMarker,\r\n    ];\r\n\r\n    this._markers.forEach( ( marker ) => {\r\n\r\n      marker.visible = false;\r\n\r\n      this.add( marker );\r\n\r\n    } );\r\n\r\n  }\r\n\r\n  /**\r\n   * @param {Array<Vector3>} path\r\n   * @return {this}\r\n   */\r\n  setPath ( path ) {\r\n\r\n    while ( this._pathMarker.children.length ) {\r\n\r\n      this._pathMarker.children[ 0 ].visible = false;\r\n      this._pathMarker.remove( this._pathMarker.children[ 0 ] );\r\n\r\n    }\r\n\r\n    path = [ this._playerMarker.position ].concat( path );\r\n\r\n    // Draw debug lines\r\n    const geometry = new Geometry();\r\n    for (let i = 0; i < path.length; i++) {\r\n      geometry.vertices.push( path[ i ].clone().add( new Vector3( 0, OFFSET, 0 ) ) );\r\n    }\r\n    this._pathMarker.add( new Line( geometry, this._pathLineMaterial ) );\r\n\r\n    for ( let i = 0; i < path.length - 1; i++ ) {\r\n\r\n      const node = new Mesh( this._pathPointGeometry, this._pathPointMaterial );\r\n      node.position.copy( path[ i ] );\r\n      node.position.y += OFFSET;\r\n      this._pathMarker.add( node );\r\n\r\n    }\r\n\r\n    this._pathMarker.visible = true;\r\n\r\n    return this;\r\n\r\n  }\r\n\r\n  /**\r\n   * @param {Vector3} position\r\n   * @return {this}\r\n   */\r\n  setPlayerPosition( position ) {\r\n\r\n    this._playerMarker.position.copy( position );\r\n    this._playerMarker.visible = true;\r\n    return this;\r\n\r\n  }\r\n\r\n  /**\r\n   * @param {Vector3} position\r\n   * @return {this}\r\n   */\r\n  setTargetPosition( position ) {\r\n\r\n    this._targetMarker.position.copy( position );\r\n    this._targetMarker.visible = true;\r\n    return this;\r\n\r\n  }\r\n\r\n  /**\r\n   * @param {Vector3} position\r\n   * @return {this}\r\n   */\r\n  setNodePosition( position ) {\r\n\r\n    this._nodeMarker.position.copy( position );\r\n    this._nodeMarker.visible = true;\r\n    return this;\r\n\r\n  }\r\n\r\n  /**\r\n   * @param {Vector3} position\r\n   * @return {this}\r\n   */\r\n  setStepPosition( position ) {\r\n\r\n    this._stepMarker.position.copy( position );\r\n    this._stepMarker.visible = true;\r\n    return this;\r\n\r\n  }\r\n\r\n  /**\r\n   * Hides all markers.\r\n   * @return {this}\r\n   */\r\n  reset () {\r\n\r\n    while ( this._pathMarker.children.length ) {\r\n\r\n      this._pathMarker.children[ 0 ].visible = false;\r\n      this._pathMarker.remove( this._pathMarker.children[ 0 ] );\r\n\r\n    }\r\n\r\n    this._markers.forEach( ( marker ) => {\r\n\r\n      marker.visible = false;\r\n\r\n    } );\r\n\r\n    return this;\r\n\r\n  }\r\n\r\n}\r\n\r\nexport { PathfindingHelper };\r\n"],"names":["Utils","[object Object]","value","decimals","factor","Math","pow","round","list","floor","random","length","a","b","dx","x","dy","y","dz","z","poly","pt","c","i","l","j","vector","polygon","vertices","lowestPoint","highestPoint","polygonVertices","vertexIds","forEach","vId","min","max","push","this","isPointInPoly","ax","az","distanceToSquared","BinaryHeap","scoreFunction","content","element","sinkDown","result","end","pop","bubbleUp","node","indexOf","n","parentN","parent","elemScore","child2N","child1N","child1Score","swap","child1","child2","Channel","portals","p1","p2","undefined","left","right","pts","portalApex","portalLeft","portalRight","apexIndex","leftIndex","rightIndex","triarea2","vequal","path","Pathfinding","zones","geometry","isGeometry","console","warn","Geometry","fromBufferGeometry","navMesh","_buildNavigationMesh","zone","v","roundNumber","groups","_buildPolygonGroups","Array","group","groupIndex","indexByPolygon","Map","polyIndex","set","newGroup","neighbourIndices","neighbours","get","_getSharedVerticesInOrder","centroid","Vector3","add","divideScalar","id","mergeVertices","_buildPolygonsFromGeometry","navigationMesh","polygons","polygonGroups","spreadGroupId","neighbour","vertexPolygonMap","Set","groupA","groupB","groupC","candidate","includes","faces","face","_buildPolygonNeighbours","aList","a0","a1","a2","bList","shared0","shared1","shared2","from","buildZone","zoneID","groupID","nearPosition","nearRange","candidates","p","sample","position","checkPolygon","nodes","closestNode","closestDistance","Infinity","distance","isVectorInPolygon","startPosition","targetPosition","getClosestNode","farthestNode","paths","graph","f","g","h","cost","visited","closed","start","init","openHeap","heap","size","currentNode","curr","ret","cleanUp","reverse","il","gScore","beenVisited","Error","heuristic","rescoreElement","pos1","pos2","e","search","getPortalFromTo","channel","nextPolygon","stringPull","map","shift","prototype","getGroup","plane","Plane","closestNodeGroup","setFromCoplanarPoints","abs","distanceToPoint","measuredDistance","clampStep","point","triangle","Triangle","endPoint","closestPoint","startRef","endRef","endTarget","nodeQueue","nodeDepth","projectPoint","copy","closestPointToPoint","depth","colors","PLAYER","Color","convertGammaToLinear","getHex","TARGET","PATH","WAYPOINT","CLAMPED_STEP","CLOSEST_NODE","PathfindingHelper","Object3D","super","_playerMarker","Mesh","SphereGeometry","MeshBasicMaterial","color","_targetMarker","BoxGeometry","_nodeMarker","_stepMarker","_pathMarker","_pathLineMaterial","LineBasicMaterial","linewidth","_pathPointMaterial","_pathPointGeometry","SphereBufferGeometry","_markers","marker","visible","children","remove","concat","clone","Line"],"mappings":"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"}