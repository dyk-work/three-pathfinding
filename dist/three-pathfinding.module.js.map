{"version":3,"file":"three-pathfinding.module.js","sources":["../src/Utils.js","../src/BinaryHeap.js","../src/AStar.js","../src/Builder.js","../src/Channel.js","../src/index.js"],"sourcesContent":["class Utils {\n\n  static computeCentroids (geometry) {\n    var f, fl, face;\n\n    for ( f = 0, fl = geometry.faces.length; f < fl; f ++ ) {\n\n      face = geometry.faces[ f ];\n      face.centroid = new THREE.Vector3( 0, 0, 0 );\n\n      face.centroid.add( geometry.vertices[ face.a ] );\n      face.centroid.add( geometry.vertices[ face.b ] );\n      face.centroid.add( geometry.vertices[ face.c ] );\n      face.centroid.divideScalar( 3 );\n\n    }\n  }\n\n  static roundNumber (number, decimals) {\n    var newnumber = Number(number + '').toFixed(parseInt(decimals));\n    return parseFloat(newnumber);\n  }\n\n  static sample (list) {\n    return list[Math.floor(Math.random() * list.length)];\n  }\n\n  static mergeVertexIds (aList, bList) {\n\n    var sharedVertices = [];\n\n    aList.forEach((vID) => {\n      if (bList.indexOf(vID) >= 0) {\n        sharedVertices.push(vID);\n      }\n    });\n\n    if (sharedVertices.length < 2) return [];\n\n    if (sharedVertices.includes(aList[0]) && sharedVertices.includes(aList[aList.length - 1])) {\n      // Vertices on both edges are bad, so shift them once to the left\n      aList.push(aList.shift());\n    }\n\n    if (sharedVertices.includes(bList[0]) && sharedVertices.includes(bList[bList.length - 1])) {\n      // Vertices on both edges are bad, so shift them once to the left\n      bList.push(bList.shift());\n    }\n\n    // Again!\n    sharedVertices = [];\n\n    aList.forEach((vId) => {\n      if (bList.includes(vId)) {\n        sharedVertices.push(vId);\n      }\n    });\n\n    var clockwiseMostSharedVertex = sharedVertices[1];\n    var counterClockwiseMostSharedVertex = sharedVertices[0];\n\n\n    var cList = aList.slice();\n    while (cList[0] !== clockwiseMostSharedVertex) {\n      cList.push(cList.shift());\n    }\n\n    var c = 0;\n\n    var temp = bList.slice();\n    while (temp[0] !== counterClockwiseMostSharedVertex) {\n      temp.push(temp.shift());\n\n      if (c++ > 10) throw new Error('Unexpected state');\n    }\n\n    // Shave\n    temp.shift();\n    temp.pop();\n\n    cList = cList.concat(temp);\n\n    return cList;\n  }\n\n  static setPolygonCentroid (polygon, navigationMesh) {\n    var sum = new THREE.Vector3();\n\n    var vertices = navigationMesh.vertices;\n\n    polygon.vertexIds.forEach((vId) => {\n      sum.add(vertices[vId]);\n    });\n\n    sum.divideScalar(polygon.vertexIds.length);\n\n    polygon.centroid.copy(sum);\n  }\n\n  static cleanPolygon (polygon, navigationMesh) {\n\n    var newVertexIds = [];\n\n    var vertices = navigationMesh.vertices;\n\n    for (var i = 0; i < polygon.vertexIds.length; i++) {\n\n      var vertex = vertices[polygon.vertexIds[i]];\n\n      var nextVertexId, previousVertexId;\n      var nextVertex, previousVertex;\n\n      if (i === 0) {\n        nextVertexId = polygon.vertexIds[1];\n        previousVertexId = polygon.vertexIds[polygon.vertexIds.length - 1];\n      } else if (i === polygon.vertexIds.length - 1) {\n        nextVertexId = polygon.vertexIds[0];\n        previousVertexId = polygon.vertexIds[polygon.vertexIds.length - 2];\n      } else {\n        nextVertexId = polygon.vertexIds[i + 1];\n        previousVertexId = polygon.vertexIds[i - 1];\n      }\n\n      nextVertex = vertices[nextVertexId];\n      previousVertex = vertices[previousVertexId];\n\n      var a = nextVertex.clone().sub(vertex);\n      var b = previousVertex.clone().sub(vertex);\n\n      var angle = a.angleTo(b);\n\n      if (angle > Math.PI - 0.01 && angle < Math.PI + 0.01) {\n\n        // Remove the neighbours who had this vertex\n        var goodNeighbours = [];\n        polygon.neighbours.forEach((neighbour) => {\n          if (!neighbour.vertexIds.includes(polygon.vertexIds[i])) {\n            goodNeighbours.push(neighbour);\n          }\n        });\n        polygon.neighbours = goodNeighbours;\n\n\n        // TODO cleanup the list of vertices and rebuild vertexIds for all polygons\n      } else {\n        newVertexIds.push(polygon.vertexIds[i]);\n      }\n\n    }\n\n    polygon.vertexIds = newVertexIds;\n\n    this.setPolygonCentroid(polygon, navigationMesh);\n\n  }\n\n  static isConvex (polygon, navigationMesh) {\n\n    var vertices = navigationMesh.vertices;\n\n    if (polygon.vertexIds.length < 3) return false;\n\n    var convex = true;\n\n    var total = 0;\n\n    var results = [];\n\n    for (var i = 0; i < polygon.vertexIds.length; i++) {\n\n      var vertex = vertices[polygon.vertexIds[i]];\n\n      var nextVertex, previousVertex;\n\n      if (i === 0) {\n        nextVertex = vertices[polygon.vertexIds[1]];\n        previousVertex = vertices[polygon.vertexIds[polygon.vertexIds.length - 1]];\n      } else if (i === polygon.vertexIds.length - 1) {\n        nextVertex = vertices[polygon.vertexIds[0]];\n        previousVertex = vertices[polygon.vertexIds[polygon.vertexIds.length - 2]];\n      } else {\n        nextVertex = vertices[polygon.vertexIds[i + 1]];\n        previousVertex = vertices[polygon.vertexIds[i - 1]];\n      }\n\n      var a = nextVertex.clone().sub(vertex);\n      var b = previousVertex.clone().sub(vertex);\n\n      var angle = a.angleTo(b);\n      total += angle;\n\n      if (angle === Math.PI || angle === 0) return false;\n\n      var r = a.cross(b).y;\n      results.push(r);\n    }\n\n    // if ( total > (polygon.vertexIds.length-2)*Math.PI ) return false;\n\n    results.forEach((r) => {\n      if (r === 0) convex = false;\n    });\n\n    if (results[0] > 0) {\n      results.forEach((r) => {\n        if (r < 0) convex = false;\n      });\n    } else {\n      results.forEach((r) => {\n        if (r > 0) convex = false;\n      });\n    }\n\n    return convex;\n  }\n\n  static distanceToSquared (a, b) {\n\n    var dx = a.x - b.x;\n    var dy = a.y - b.y;\n    var dz = a.z - b.z;\n\n    return dx * dx + dy * dy + dz * dz;\n\n  }\n\n  //+ Jonas Raoni Soares Silva\n  //@ http://jsfromhell.com/math/is-point-in-poly [rev. #0]\n  static isPointInPoly (poly, pt) {\n    for (var c = false, i = -1, l = poly.length, j = l - 1; ++i < l; j = i)\n      ((poly[i].z <= pt.z && pt.z < poly[j].z) || (poly[j].z <= pt.z && pt.z < poly[i].z)) && (pt.x < (poly[j].x - poly[i].x) * (pt.z - poly[i].z) / (poly[j].z - poly[i].z) + poly[i].x) && (c = !c);\n    return c;\n  }\n\n  static isVectorInPolygon (vector, polygon, vertices) {\n\n    // reference point will be the centroid of the polygon\n    // We need to rotate the vector as well as all the points which the polygon uses\n\n    var lowestPoint = 100000;\n    var highestPoint = -100000;\n\n    var polygonVertices = [];\n\n    polygon.vertexIds.forEach((vId) => {\n      lowestPoint = Math.min(vertices[vId].y, lowestPoint);\n      highestPoint = Math.max(vertices[vId].y, highestPoint);\n      polygonVertices.push(vertices[vId]);\n    });\n\n    if (vector.y < highestPoint + 0.5 && vector.y > lowestPoint - 0.5 &&\n      this.isPointInPoly(polygonVertices, vector)) {\n      return true;\n    }\n    return false;\n  }\n\n  static triarea2 (a, b, c) {\n    var ax = b.x - a.x;\n    var az = b.z - a.z;\n    var bx = c.x - a.x;\n    var bz = c.z - a.z;\n    return bx * az - ax * bz;\n  }\n\n  static vequal (a, b) {\n    return this.distanceToSquared(a, b) < 0.00001;\n  }\n\n  static array_intersect () {\n    let i, shortest, nShortest, n, len, ret = [],\n      obj = {},\n      nOthers;\n    nOthers = arguments.length - 1;\n    nShortest = arguments[0].length;\n    shortest = 0;\n    for (i = 0; i <= nOthers; i++) {\n      n = arguments[i].length;\n      if (n < nShortest) {\n        shortest = i;\n        nShortest = n;\n      }\n    }\n\n    for (i = 0; i <= nOthers; i++) {\n      n = (i === shortest) ? 0 : (i || shortest); //Read the shortest array first. Read the first array instead of the shortest\n      len = arguments[n].length;\n      for (var j = 0; j < len; j++) {\n        var elem = arguments[n][j];\n        if (obj[elem] === i - 1) {\n          if (i === nOthers) {\n            ret.push(elem);\n            obj[elem] = 0;\n          } else {\n            obj[elem] = i;\n          }\n        } else if (i === 0) {\n          obj[elem] = 0;\n        }\n      }\n    }\n    return ret;\n  }\n}\n\nexport { Utils };\n","// javascript-astar\n// http://github.com/bgrins/javascript-astar\n// Freely distributable under the MIT License.\n// Implements the astar search algorithm in javascript using a binary heap.\n\nclass BinaryHeap {\n  constructor (scoreFunction) {\n    this.content = [];\n    this.scoreFunction = scoreFunction;\n  }\n\n  push (element) {\n    // Add the new element to the end of the array.\n    this.content.push(element);\n\n    // Allow it to sink down.\n    this.sinkDown(this.content.length - 1);\n  }\n\n  pop () {\n    // Store the first element so we can return it later.\n    const result = this.content[0];\n    // Get the element at the end of the array.\n    const end = this.content.pop();\n    // If there are any elements left, put the end element at the\n    // start, and let it bubble up.\n    if (this.content.length > 0) {\n      this.content[0] = end;\n      this.bubbleUp(0);\n    }\n    return result;\n  }\n\n  remove (node) {\n    const i = this.content.indexOf(node);\n\n    // When it is found, the process seen in 'pop' is repeated\n    // to fill up the hole.\n    const end = this.content.pop();\n\n    if (i !== this.content.length - 1) {\n      this.content[i] = end;\n\n      if (this.scoreFunction(end) < this.scoreFunction(node)) {\n        this.sinkDown(i);\n      } else {\n        this.bubbleUp(i);\n      }\n    }\n  }\n\n  size () {\n    return this.content.length;\n  }\n\n  rescoreElement (node) {\n    this.sinkDown(this.content.indexOf(node));\n  }\n\n  sinkDown (n) {\n    // Fetch the element that has to be sunk.\n    const element = this.content[n];\n\n    // When at 0, an element can not sink any further.\n    while (n > 0) {\n      // Compute the parent element's index, and fetch it.\n      const parentN = ((n + 1) >> 1) - 1;\n      const parent = this.content[parentN];\n\n      if (this.scoreFunction(element) < this.scoreFunction(parent)) {\n        // Swap the elements if the parent is greater.\n        this.content[parentN] = element;\n        this.content[n] = parent;\n        // Update 'n' to continue at the new position.\n        n = parentN;\n      } else {\n        // Found a parent that is less, no need to sink any further.\n        break;\n      }\n    }\n  }\n\n  bubbleUp (n) {\n    // Look up the target element and its score.\n    const length = this.content.length,\n      element = this.content[n],\n      elemScore = this.scoreFunction(element);\n\n    while (true) {\n      // Compute the indices of the child elements.\n      const child2N = (n + 1) << 1,\n        child1N = child2N - 1;\n      // This is used to store the new position of the element,\n      // if any.\n      let swap = null;\n      let child1Score;\n      // If the first child exists (is inside the array)...\n      if (child1N < length) {\n        // Look it up and compute its score.\n        const child1 = this.content[child1N];\n        child1Score = this.scoreFunction(child1);\n\n        // If the score is less than our element's, we need to swap.\n        if (child1Score < elemScore) {\n          swap = child1N;\n        }\n      }\n\n      // Do the same checks for the other child.\n      if (child2N < length) {\n        const child2 = this.content[child2N],\n          child2Score = this.scoreFunction(child2);\n        if (child2Score < (swap === null ? elemScore : child1Score)) {\n          swap = child2N;\n        }\n      }\n\n      // If the element needs to be moved, swap it, and continue.\n      if (swap !== null) {\n        this.content[n] = this.content[swap];\n        this.content[swap] = element;\n        n = swap;\n      }\n\n      // Otherwise, we are done.\n      else {\n        break;\n      }\n    }\n  }\n\n}\n\nexport { BinaryHeap };\n","import { BinaryHeap } from './BinaryHeap';\nimport { Utils } from './Utils.js';\n\nclass AStar {\n  static init (graph) {\n    for (let x = 0; x < graph.length; x++) {\n      //for(var x in graph) {\n      const node = graph[x];\n      node.f = 0;\n      node.g = 0;\n      node.h = 0;\n      node.cost = 1.0;\n      node.visited = false;\n      node.closed = false;\n      node.parent = null;\n    }\n  }\n\n  static cleanUp (graph) {\n    for (let x = 0; x < graph.length; x++) {\n      const node = graph[x];\n      delete node.f;\n      delete node.g;\n      delete node.h;\n      delete node.cost;\n      delete node.visited;\n      delete node.closed;\n      delete node.parent;\n    }\n  }\n\n  static heap () {\n    return new BinaryHeap(function (node) {\n      return node.f;\n    });\n  }\n\n  static search (graph, start, end) {\n    this.init(graph);\n    //heuristic = heuristic || astar.manhattan;\n\n\n    const openHeap = this.heap();\n\n    openHeap.push(start);\n\n    while (openHeap.size() > 0) {\n\n      // Grab the lowest f(x) to process next.  Heap keeps this sorted for us.\n      const currentNode = openHeap.pop();\n\n      // End case -- result has been found, return the traced path.\n      if (currentNode === end) {\n        let curr = currentNode;\n        const ret = [];\n        while (curr.parent) {\n          ret.push(curr);\n          curr = curr.parent;\n        }\n        this.cleanUp(ret);\n        return ret.reverse();\n      }\n\n      // Normal case -- move currentNode from open to closed, process each of its neighbours.\n      currentNode.closed = true;\n\n      // Find all neighbours for the current node. Optionally find diagonal neighbours as well (false by default).\n      const neighbours = this.neighbours(graph, currentNode);\n\n      for (let i = 0, il = neighbours.length; i < il; i++) {\n        const neighbour = neighbours[i];\n\n        if (neighbour.closed) {\n          // Not a valid node to process, skip to next neighbour.\n          continue;\n        }\n\n        // The g score is the shortest distance from start to current node.\n        // We need to check if the path we have arrived at this neighbour is the shortest one we have seen yet.\n        const gScore = currentNode.g + neighbour.cost;\n        const beenVisited = neighbour.visited;\n\n        if (!beenVisited || gScore < neighbour.g) {\n\n          // Found an optimal (so far) path to this node.  Take score for node to see how good it is.\n          neighbour.visited = true;\n          neighbour.parent = currentNode;\n          if (!neighbour.centroid || !end.centroid) throw new Error('Unexpected state');\n          neighbour.h = neighbour.h || this.heuristic(neighbour.centroid, end.centroid);\n          neighbour.g = gScore;\n          neighbour.f = neighbour.g + neighbour.h;\n\n          if (!beenVisited) {\n            // Pushing to heap will put it in proper place based on the 'f' value.\n            openHeap.push(neighbour);\n          } else {\n            // Already seen the node, but since it has been rescored we need to reorder it in the heap\n            openHeap.rescoreElement(neighbour);\n          }\n        }\n      }\n    }\n\n    // No result was found - empty array signifies failure to find path.\n    return [];\n  }\n\n  static heuristic (pos1, pos2) {\n    return Utils.distanceToSquared(pos1, pos2);\n  }\n\n  static neighbours (graph, node) {\n    const ret = [];\n\n    for (let e = 0; e < node.neighbours.length; e++) {\n      ret.push(graph[node.neighbours[e]]);\n    }\n\n    return ret;\n  }\n}\n\nexport { AStar };\n","import { Utils } from './Utils';\n\nlet polygonId = 1;\n\nclass Builder {\n  /**\n   * Constructs groups from the given navigation mesh.\n   * @param  {THREE.Geometry} geometry\n   * @return {Zone}\n   */\n  static buildZone (geometry) {\n\n    const navMesh = this._buildNavigationMesh(geometry);\n\n    const zone = {};\n\n    navMesh.vertices.forEach((v) => {\n      v.x = Utils.roundNumber(v.x, 2);\n      v.y = Utils.roundNumber(v.y, 2);\n      v.z = Utils.roundNumber(v.z, 2);\n    });\n\n    zone.vertices = navMesh.vertices;\n\n    const groups = this._buildPolygonGroups(navMesh);\n\n    zone.groups = [];\n\n    const findPolygonIndex = function (group, p) {\n      for (let i = 0; i < group.length; i++) {\n        if (p === group[i]) return i;\n      }\n    };\n\n    groups.forEach((group) => {\n\n      const newGroup = [];\n\n      group.forEach((p) => {\n\n        const neighbours = p.neighbours.map((n) => findPolygonIndex(group, n));\n\n        // Build a portal list to each neighbour\n        const portals = p.neighbours.map((n) => this._getSharedVerticesInOrder(p, n));\n\n        p.centroid.x = Utils.roundNumber(p.centroid.x, 2);\n        p.centroid.y = Utils.roundNumber(p.centroid.y, 2);\n        p.centroid.z = Utils.roundNumber(p.centroid.z, 2);\n\n        newGroup.push({\n          id: findPolygonIndex(group, p),\n          neighbours: neighbours,\n          vertexIds: p.vertexIds,\n          centroid: p.centroid,\n          portals: portals\n        });\n\n      });\n\n      zone.groups.push(newGroup);\n    });\n\n    return zone;\n  }\n\n  /**\n   * Constructs a navigation mesh from the given geometry.\n   * @param {THREE.Geometry} geometry\n   * @return {Object}\n   */\n  static _buildNavigationMesh (geometry) {\n    Utils.computeCentroids(geometry);\n    geometry.mergeVertices();\n    return this._buildPolygonsFromGeometry(geometry);\n  }\n\n  static _buildPolygonGroups (navigationMesh) {\n\n    const polygons = navigationMesh.polygons;\n\n    const polygonGroups = [];\n    let groupCount = 0;\n\n    const spreadGroupId = function (polygon) {\n      polygon.neighbours.forEach((neighbour) => {\n        if (neighbour.group === undefined) {\n          neighbour.group = polygon.group;\n          spreadGroupId(neighbour);\n        }\n      });\n    };\n\n    polygons.forEach((polygon) => {\n\n      if (polygon.group === undefined) {\n        polygon.group = groupCount++;\n        // Spread it\n        spreadGroupId(polygon);\n      }\n\n      if (!polygonGroups[polygon.group]) polygonGroups[polygon.group] = [];\n\n      polygonGroups[polygon.group].push(polygon);\n    });\n\n    return polygonGroups;\n  }\n\n  static _buildPolygonNeighbours (polygon, navigationMesh) {\n    polygon.neighbours = [];\n\n    // All other nodes that contain at least two of our vertices are our neighbours\n    for (let i = 0, len = navigationMesh.polygons.length; i < len; i++) {\n      if (polygon === navigationMesh.polygons[i]) continue;\n\n      // Don't check polygons that are too far, since the intersection tests take a long time\n      if (polygon.centroid.distanceToSquared(navigationMesh.polygons[i].centroid) > 100 * 100) continue;\n\n      const matches = Utils.array_intersect(polygon.vertexIds, navigationMesh.polygons[i].vertexIds);\n\n      if (matches.length >= 2) {\n        polygon.neighbours.push(navigationMesh.polygons[i]);\n      }\n    }\n  }\n\n  static _buildPolygonsFromGeometry (geometry) {\n\n    const polygons = [];\n    const vertices = geometry.vertices;\n    const faceVertexUvs = geometry.faceVertexUvs;\n\n    // Convert the faces into a custom format that supports more than 3 vertices\n    geometry.faces.forEach((face) => {\n      polygons.push({\n        id: polygonId++,\n        vertexIds: [face.a, face.b, face.c],\n        centroid: face.centroid,\n        normal: face.normal,\n        neighbours: []\n      });\n    });\n\n    const navigationMesh = {\n      polygons: polygons,\n      vertices: vertices,\n      faceVertexUvs: faceVertexUvs\n    };\n\n    // Build a list of adjacent polygons\n    polygons.forEach((polygon) => {\n      this._buildPolygonNeighbours(polygon, navigationMesh);\n    });\n\n    return navigationMesh;\n  }\n\n  static _getSharedVerticesInOrder (a, b) {\n\n    const aList = a.vertexIds;\n    const bList = b.vertexIds;\n\n    const sharedVertices = [];\n\n    aList.forEach((vId) => {\n      if (bList.includes(vId)) {\n        sharedVertices.push(vId);\n      }\n    });\n\n    if (sharedVertices.length < 2) return [];\n\n    if (sharedVertices.includes(aList[0]) && sharedVertices.includes(aList[aList.length - 1])) {\n      // Vertices on both edges are bad, so shift them once to the left\n      aList.push(aList.shift());\n    }\n\n    if (sharedVertices.includes(bList[0]) && sharedVertices.includes(bList[bList.length - 1])) {\n      // Vertices on both edges are bad, so shift them once to the left\n      bList.push(bList.shift());\n    }\n\n    // Again!\n    sharedVertices.length = 0;\n\n    aList.forEach((vId) => {\n      if (bList.includes(vId)) {\n        sharedVertices.push(vId);\n      }\n    });\n\n    return sharedVertices;\n  }\n}\n\nexport { Builder };\n","import { Utils } from './Utils';\n\nclass Channel {\n  constructor () {\n    this.portals = [];\n  }\n\n  push (p1, p2) {\n    if (p2 === undefined) p2 = p1;\n    this.portals.push({\n      left: p1,\n      right: p2\n    });\n  }\n\n  stringPull () {\n    const portals = this.portals;\n    const pts = [];\n    // Init scan state\n    let portalApex, portalLeft, portalRight;\n    let apexIndex = 0,\n      leftIndex = 0,\n      rightIndex = 0;\n\n    portalApex = portals[0].left;\n    portalLeft = portals[0].left;\n    portalRight = portals[0].right;\n\n    // Add start point.\n    pts.push(portalApex);\n\n    for (let i = 1; i < portals.length; i++) {\n      const left = portals[i].left;\n      const right = portals[i].right;\n\n      // Update right vertex.\n      if (Utils.triarea2(portalApex, portalRight, right) <= 0.0) {\n        if (Utils.vequal(portalApex, portalRight) || Utils.triarea2(portalApex, portalLeft, right) > 0.0) {\n          // Tighten the funnel.\n          portalRight = right;\n          rightIndex = i;\n        } else {\n          // Right over left, insert left to path and restart scan from portal left point.\n          pts.push(portalLeft);\n          // Make current left the new apex.\n          portalApex = portalLeft;\n          apexIndex = leftIndex;\n          // Reset portal\n          portalLeft = portalApex;\n          portalRight = portalApex;\n          leftIndex = apexIndex;\n          rightIndex = apexIndex;\n          // Restart scan\n          i = apexIndex;\n          continue;\n        }\n      }\n\n      // Update left vertex.\n      if (Utils.triarea2(portalApex, portalLeft, left) >= 0.0) {\n        if (Utils.vequal(portalApex, portalLeft) || Utils.triarea2(portalApex, portalRight, left) < 0.0) {\n          // Tighten the funnel.\n          portalLeft = left;\n          leftIndex = i;\n        } else {\n          // Left over right, insert right to path and restart scan from portal right point.\n          pts.push(portalRight);\n          // Make current right the new apex.\n          portalApex = portalRight;\n          apexIndex = rightIndex;\n          // Reset portal\n          portalLeft = portalApex;\n          portalRight = portalApex;\n          leftIndex = apexIndex;\n          rightIndex = apexIndex;\n          // Restart scan\n          i = apexIndex;\n          continue;\n        }\n      }\n    }\n\n    if ((pts.length === 0) || (!Utils.vequal(pts[pts.length - 1], portals[portals.length - 1].left))) {\n      // Append last point to path.\n      pts.push(portals[portals.length - 1].left);\n    }\n\n    this.path = pts;\n    return pts;\n  }\n}\n\nexport { Channel };\n","/* global THREE */\n\nimport { Utils } from './Utils';\nimport { AStar } from './AStar';\nimport { Builder } from './Builder';\nimport { Channel } from './Channel';\n\n/**\n * Defines an instance of the pathfinding module, with one or more zones.\n */\nclass Pathfinding {\n\tconstructor () {\n\t\tthis.zones = {};\n\t}\n\n\t/**\n\t * (Static) Builds a zone/node set from navigation mesh geometry.\n\t * @param  {THREE.Geometry} geometry\n\t * @return {Zone}\n\t */\n\tstatic createZone (geometry) {\n\t\treturn Builder.buildZone(geometry);\n\t}\n\n\t/**\n\t * Sets data for the given zone.\n\t * @param {string} zoneID\n\t * @param {Zone} zone\n\t */\n\tsetZoneData (zoneID, zone) {\n\t\tthis.zones[zoneID] = zone;\n\t}\n\n\t/**\n\t * Returns closest node group ID for given position.\n\t * @param  {string} zoneID\n\t * @param  {THREE.Vector3} position\n\t * @return {number}\n\t */\n\tgetGroup (zoneID, position) {\n\t\tif (!this.zones[zoneID]) return null;\n\n\t\tlet closestNodeGroup = null;\n\t\tlet distance = Math.pow(50, 2);\n\n\t\tthis.zones[zoneID].groups.forEach((group, index) => {\n\t\t\tgroup.forEach((node) => {\n\t\t\t\tconst measuredDistance = Utils.distanceToSquared(node.centroid, position);\n\t\t\t\tif (measuredDistance < distance) {\n\t\t\t\t\tclosestNodeGroup = index;\n\t\t\t\t\tdistance = measuredDistance;\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\treturn closestNodeGroup;\n\t}\n\n\t/**\n\t * Returns a random node within a given range of a given position.\n\t * @param  {string} zoneID\n\t * @param  {number} groupID\n\t * @param  {THREE.Vector3} nearPosition\n\t * @param  {number} nearRange\n\t * @return {Node}\n\t */\n\tgetRandomNode (zoneID, groupID, nearPosition, nearRange) {\n\n\t\tif (!this.zones[zoneID]) return new THREE.Vector3();\n\n\t\tnearPosition = nearPosition || null;\n\t\tnearRange = nearRange || 0;\n\n\t\tconst candidates = [];\n\t\tconst polygons = this.zones[zoneID].groups[groupID];\n\n\t\tpolygons.forEach((p) => {\n\t\t\tif (nearPosition && nearRange) {\n\t\t\t\tif (Utils.distanceToSquared(nearPosition, p.centroid) < nearRange * nearRange) {\n\t\t\t\t\tcandidates.push(p.centroid);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcandidates.push(p.centroid);\n\t\t\t}\n\t\t});\n\n\t\treturn Utils.sample(candidates) || new THREE.Vector3();\n\t}\n\n\t/**\n\t * Returns the closest node to the target position.\n\t * @param  {THREE.Vector3} position\n\t * @param  {string}  zoneID\n\t * @param  {number}  groupID\n\t * @param  {boolean} checkPolygon\n\t * @return {Node}\n\t */\n\tgetClosestNode (position, zoneID, groupID, checkPolygon = false) {\n\t\tconst nodes = this.zones[zoneID].groups[groupID];\n\t\tconst vertices = this.zones[zoneID].vertices;\n\t\tlet closestNode = null;\n\t\tlet closestDistance = Infinity;\n\n\t\tnodes.forEach((node) => {\n\t\t\tconst distance = Utils.distanceToSquared(node.centroid, position);\n\t\t\tif (distance < closestDistance\n\t\t\t\t\t&& (!checkPolygon || Utils.isVectorInPolygon(position, node, vertices))) {\n\t\t\t\tclosestNode = node;\n\t\t\t\tclosestDistance = distance;\n\t\t\t}\n\t\t});\n\n\t\treturn closestNode;\n\t}\n\n\t/**\n\t * Returns a path between given start and end points. If a complete path\n\t * cannot be found, will return the nearest endpoint available.\n\t *\n\t * @param  {THREE.Vector3} startPosition Start position.\n\t * @param  {THREE.Vector3} targetPosition Destination.\n\t * @param  {string} zoneID ID of current zone.\n\t * @param  {number} groupID Current group ID.\n\t * @return {Array<THREE.Vector3>} Array of points defining the path.\n\t */\n\tfindPath (startPosition, targetPosition, zoneID, groupID) {\n\t\tconst nodes = this.zones[zoneID].groups[groupID];\n\t\tconst vertices = this.zones[zoneID].vertices;\n\n\t\tconst closestNode = this.getClosestNode(startPosition, zoneID, groupID);\n\t\tconst farthestNode = this.getClosestNode(targetPosition, zoneID, groupID, true);\n\n\t\t// If we can't find any node, just go straight to the target\n\t\tif (!closestNode || !farthestNode) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst paths = AStar.search(nodes, closestNode, farthestNode);\n\n\t\tconst getPortalFromTo = function (a, b) {\n\t\t\tfor (var i = 0; i < a.neighbours.length; i++) {\n\t\t\t\tif (a.neighbours[i] === b.id) {\n\t\t\t\t\treturn a.portals[i];\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t// We have the corridor, now pull the rope.\n\t\tconst channel = new Channel();\n\t\tchannel.push(startPosition);\n\t\tfor (let i = 0; i < paths.length; i++) {\n\t\t\tconst polygon = paths[i];\n\t\t\tconst nextPolygon = paths[i + 1];\n\n\t\t\tif (nextPolygon) {\n\t\t\t\tconst portals = getPortalFromTo(polygon, nextPolygon);\n\t\t\t\tchannel.push(\n\t\t\t\t\tvertices[portals[0]],\n\t\t\t\t\tvertices[portals[1]]\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\tchannel.push(targetPosition);\n\t\tchannel.stringPull();\n\n\t\t// Return the path, omitting first position (which is already known).\n\t\tconst path = channel.path.map((c) => new THREE.Vector3(c.x, c.y, c.z));\n\t\tpath.shift();\n\t\treturn path;\n\t}\n}\n\n/**\n * Clamps a step along the navmesh, given start and desired endpoint. May be\n * used to constrain first-person / WASD controls.\n *\n * @param  {THREE.Vector3} start\n * @param  {THREE.Vector3} end Desired endpoint.\n * @param  {Node} node\n * @param  {string} zoneID\n * @param  {number} groupID\n * @param  {THREE.Vector3} endTarget Updated endpoint.\n * @return {Node} Updated node.\n */\nPathfinding.prototype.clampStep = (function () {\n\tconst point = new THREE.Vector3();\n\tconst plane = new THREE.Plane();\n\tconst triangle = new THREE.Triangle();\n\n\tlet closestNode;\n\tlet closestPoint = new THREE.Vector3();\n\tlet closestDistance;\n\n\treturn function (start, end, node, zoneID, groupID, endTarget) {\n\t\tconst vertices = this.zones[zoneID].vertices;\n\t\tconst nodes = this.zones[zoneID].groups[groupID];\n\n\t\tconst nodeQueue = [node];\n\t\tconst nodeDepth = {};\n\t\tnodeDepth[node.id] = 0;\n\n\t\tclosestNode = undefined;\n\t\tclosestPoint.set(0, 0, 0);\n\t\tclosestDistance = Infinity;\n\n\t\t// Project the step along the current node.\n\t\tplane.setFromCoplanarPoints(\n\t\t\tvertices[node.vertexIds[0]],\n\t\t\tvertices[node.vertexIds[1]],\n\t\t\tvertices[node.vertexIds[2]]\n\t\t);\n\t\tplane.projectPoint(end, point);\n\t\tend.copy(point);\n\n\t\tfor (let currentNode = nodeQueue.pop(); currentNode; currentNode = nodeQueue.pop()) {\n\n\t\t\ttriangle.set(\n\t\t\t\tvertices[currentNode.vertexIds[0]],\n\t\t\t\tvertices[currentNode.vertexIds[1]],\n\t\t\t\tvertices[currentNode.vertexIds[2]]\n\t\t\t);\n\n\t\t\ttriangle.closestPointToPoint(end, point);\n\n\t\t\tif (point.distanceToSquared(end) < closestDistance) {\n\t\t\t\tclosestNode = currentNode;\n\t\t\t\tclosestPoint.copy(point);\n\t\t\t\tclosestDistance = point.distanceToSquared(end);\n\t\t\t}\n\n\t\t\tconst depth = nodeDepth[currentNode];\n\t\t\tif (depth > 2) continue;\n\n\t\t\tfor (let i = 0; i < currentNode.neighbours.length; i++) {\n\t\t\t\tconst neighbour = nodes[currentNode.neighbours[i]];\n\t\t\t\tif (neighbour.id in nodeDepth) continue;\n\n\t\t\t\tnodeQueue.push(neighbour);\n\t\t\t\tnodeDepth[neighbour.id] = depth + 1;\n\t\t\t}\n\t\t}\n\n\t\tendTarget.copy(closestPoint);\n\t\treturn closestNode;\n\t};\n}());\n\n/**\n * Defines a zone of interconnected groups on a navigation mesh.\n *\n * @type {Object}\n * @property {Array<Group>} groups\n * @property {Array<THREE.Vector3} vertices\n */\nconst Zone = {}; // jshint ignore:line\n\n/**\n * Defines a group within a navigation mesh.\n *\n * @type {Object}\n */\nconst Group = {}; // jshint ignore:line\n\n/**\n * Defines a node (or polygon) within a group.\n *\n * @type {Object}\n * @property {number} id\n * @property {Array<number>} neighbours IDs of neighboring nodes.\n * @property {Array<number} vertexIds\n * @property {THREE.Vector3} centroid\n * @property {Array<Array<number>>} portals Array of portals, each defined by two vertex IDs.\n * @property {boolean} closed\n * @property {number} cost\n */\nconst Node = {}; // jshint ignore:line\n\nexport { Pathfinding };\n"],"names":["Utils","computeCentroids","geometry","f","fl","face","faces","length","centroid","THREE","Vector3","add","vertices","a","b","c","divideScalar","roundNumber","number","decimals","newnumber","Number","toFixed","parseInt","parseFloat","sample","list","Math","floor","random","mergeVertexIds","aList","bList","sharedVertices","forEach","vID","indexOf","push","includes","shift","vId","clockwiseMostSharedVertex","counterClockwiseMostSharedVertex","cList","slice","temp","Error","pop","concat","setPolygonCentroid","polygon","navigationMesh","sum","vertexIds","copy","cleanPolygon","newVertexIds","i","nextVertexId","previousVertexId","previousVertex","vertex","clone","sub","angle","angleTo","PI","goodNeighbours","neighbours","neighbour","isConvex","convex","results","nextVertex","r","cross","y","distanceToSquared","dx","x","dy","dz","z","isPointInPoly","poly","pt","l","j","isVectorInPolygon","vector","lowestPoint","highestPoint","polygonVertices","min","max","this","triarea2","vequal","array_intersect","shortest","nShortest","n","len","nOthers","ret","obj","arguments","elem","BinaryHeap","scoreFunction","content","element","sinkDown","result","end","bubbleUp","remove","node","const","size","rescoreElement","parentN","parent","elemScore","child2N","child1N","swap","child1Score","AStar","init","graph","let","g","h","cost","visited","closed","cleanUp","heap","search","start","openHeap","currentNode","curr","reverse","il","gScore","beenVisited","heuristic","pos1","pos2","e","polygonId","Builder","buildZone","navMesh","_buildNavigationMesh","zone","v","groups","_buildPolygonGroups","findPolygonIndex","group","p","newGroup","map","portals","_getSharedVerticesInOrder","id","mergeVertices","_buildPolygonsFromGeometry","polygonGroups","groupCount","spreadGroupId","undefined","polygons","_buildPolygonNeighbours","faceVertexUvs","normal","Channel","p1","p2","stringPull","portalApex","portalLeft","portalRight","pts","apexIndex","leftIndex","rightIndex","left","right","path","closestNode","closestDistance","point","plane","triangle","closestPoint","Pathfinding","zones","createZone","setZoneData","zoneID","getGroup","position","closestNodeGroup","distance","pow","index","measuredDistance","getRandomNode","groupID","nearPosition","nearRange","candidates","getClosestNode","checkPolygon","Infinity","findPath","startPosition","targetPosition","nodes","farthestNode","paths","getPortalFromTo","channel","nextPolygon","prototype","clampStep","Plane","Triangle","endTarget","nodeQueue","nodeDepth","set","setFromCoplanarPoints","projectPoint","closestPointToPoint","depth"],"mappings":"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"}