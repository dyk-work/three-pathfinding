{"version":3,"file":"three-pathfinding.cjs.js","sources":["../src/Utils.js","../src/BinaryHeap.js","../src/AStar.js","../src/Builder.js","../src/Channel.js","../src/Pathfinding.js","../src/PathfindingHelper.js"],"sourcesContent":["class Utils {\n\n  static roundNumber (value, decimals) {\n    const factor = Math.pow(10, decimals);\n    return Math.round(value * factor) / factor;\n  }\n\n  static sample (list) {\n    return list[Math.floor(Math.random() * list.length)];\n  }\n\n  static distanceToSquared (a, b) {\n\n    var dx = a.x - b.x;\n    var dy = a.y - b.y;\n    var dz = a.z - b.z;\n\n    return dx * dx + dy * dy + dz * dz;\n\n  }\n\n  //+ Jonas Raoni Soares Silva\n  //@ http://jsfromhell.com/math/is-point-in-poly [rev. #0]\n  static isPointInPoly (poly, pt) {\n    for (var c = false, i = -1, l = poly.length, j = l - 1; ++i < l; j = i)\n      ((poly[i].z <= pt.z && pt.z < poly[j].z) || (poly[j].z <= pt.z && pt.z < poly[i].z)) && (pt.x < (poly[j].x - poly[i].x) * (pt.z - poly[i].z) / (poly[j].z - poly[i].z) + poly[i].x) && (c = !c);\n    return c;\n  }\n\n  static isVectorInPolygon (vector, polygon, vertices) {\n\n    // reference point will be the centroid of the polygon\n    // We need to rotate the vector as well as all the points which the polygon uses\n\n    var lowestPoint = 100000;\n    var highestPoint = -100000;\n\n    var polygonVertices = [];\n\n    polygon.vertexIds.forEach((vId) => {\n      lowestPoint = Math.min(vertices[vId].y, lowestPoint);\n      highestPoint = Math.max(vertices[vId].y, highestPoint);\n      polygonVertices.push(vertices[vId]);\n    });\n\n    if (vector.y < highestPoint + 0.5 && vector.y > lowestPoint - 0.5 &&\n      this.isPointInPoly(polygonVertices, vector)) {\n      return true;\n    }\n    return false;\n  }\n\n  static triarea2 (a, b, c) {\n    var ax = b.x - a.x;\n    var az = b.z - a.z;\n    var bx = c.x - a.x;\n    var bz = c.z - a.z;\n    return bx * az - ax * bz;\n  }\n\n  static vequal (a, b) {\n    return this.distanceToSquared(a, b) < 0.00001;\n  }\n}\n\nexport { Utils };\n","// javascript-astar\n// http://github.com/bgrins/javascript-astar\n// Freely distributable under the MIT License.\n// Implements the astar search algorithm in javascript using a binary heap.\n\nclass BinaryHeap {\n  constructor (scoreFunction) {\n    this.content = [];\n    this.scoreFunction = scoreFunction;\n  }\n\n  push (element) {\n    // Add the new element to the end of the array.\n    this.content.push(element);\n\n    // Allow it to sink down.\n    this.sinkDown(this.content.length - 1);\n  }\n\n  pop () {\n    // Store the first element so we can return it later.\n    const result = this.content[0];\n    // Get the element at the end of the array.\n    const end = this.content.pop();\n    // If there are any elements left, put the end element at the\n    // start, and let it bubble up.\n    if (this.content.length > 0) {\n      this.content[0] = end;\n      this.bubbleUp(0);\n    }\n    return result;\n  }\n\n  remove (node) {\n    const i = this.content.indexOf(node);\n\n    // When it is found, the process seen in 'pop' is repeated\n    // to fill up the hole.\n    const end = this.content.pop();\n\n    if (i !== this.content.length - 1) {\n      this.content[i] = end;\n\n      if (this.scoreFunction(end) < this.scoreFunction(node)) {\n        this.sinkDown(i);\n      } else {\n        this.bubbleUp(i);\n      }\n    }\n  }\n\n  size () {\n    return this.content.length;\n  }\n\n  rescoreElement (node) {\n    this.sinkDown(this.content.indexOf(node));\n  }\n\n  sinkDown (n) {\n    // Fetch the element that has to be sunk.\n    const element = this.content[n];\n\n    // When at 0, an element can not sink any further.\n    while (n > 0) {\n      // Compute the parent element's index, and fetch it.\n      const parentN = ((n + 1) >> 1) - 1;\n      const parent = this.content[parentN];\n\n      if (this.scoreFunction(element) < this.scoreFunction(parent)) {\n        // Swap the elements if the parent is greater.\n        this.content[parentN] = element;\n        this.content[n] = parent;\n        // Update 'n' to continue at the new position.\n        n = parentN;\n      } else {\n        // Found a parent that is less, no need to sink any further.\n        break;\n      }\n    }\n  }\n\n  bubbleUp (n) {\n    // Look up the target element and its score.\n    const length = this.content.length,\n      element = this.content[n],\n      elemScore = this.scoreFunction(element);\n\n    while (true) {\n      // Compute the indices of the child elements.\n      const child2N = (n + 1) << 1,\n        child1N = child2N - 1;\n      // This is used to store the new position of the element,\n      // if any.\n      let swap = null;\n      let child1Score;\n      // If the first child exists (is inside the array)...\n      if (child1N < length) {\n        // Look it up and compute its score.\n        const child1 = this.content[child1N];\n        child1Score = this.scoreFunction(child1);\n\n        // If the score is less than our element's, we need to swap.\n        if (child1Score < elemScore) {\n          swap = child1N;\n        }\n      }\n\n      // Do the same checks for the other child.\n      if (child2N < length) {\n        const child2 = this.content[child2N],\n          child2Score = this.scoreFunction(child2);\n        if (child2Score < (swap === null ? elemScore : child1Score)) {\n          swap = child2N;\n        }\n      }\n\n      // If the element needs to be moved, swap it, and continue.\n      if (swap !== null) {\n        this.content[n] = this.content[swap];\n        this.content[swap] = element;\n        n = swap;\n      }\n\n      // Otherwise, we are done.\n      else {\n        break;\n      }\n    }\n  }\n\n}\n\nexport { BinaryHeap };\n","import { BinaryHeap } from './BinaryHeap';\nimport { Utils } from './Utils.js';\n\nclass AStar {\n  static init (graph) {\n    for (let x = 0; x < graph.length; x++) {\n      //for(var x in graph) {\n      const node = graph[x];\n      node.f = 0;\n      node.g = 0;\n      node.h = 0;\n      node.cost = 1.0;\n      node.visited = false;\n      node.closed = false;\n      node.parent = null;\n    }\n  }\n\n  static cleanUp (graph) {\n    for (let x = 0; x < graph.length; x++) {\n      const node = graph[x];\n      delete node.f;\n      delete node.g;\n      delete node.h;\n      delete node.cost;\n      delete node.visited;\n      delete node.closed;\n      delete node.parent;\n    }\n  }\n\n  static heap () {\n    return new BinaryHeap(function (node) {\n      return node.f;\n    });\n  }\n\n  static search (graph, start, end) {\n    this.init(graph);\n    //heuristic = heuristic || astar.manhattan;\n\n\n    const openHeap = this.heap();\n\n    openHeap.push(start);\n\n    while (openHeap.size() > 0) {\n\n      // Grab the lowest f(x) to process next.  Heap keeps this sorted for us.\n      const currentNode = openHeap.pop();\n\n      // End case -- result has been found, return the traced path.\n      if (currentNode === end) {\n        let curr = currentNode;\n        const ret = [];\n        while (curr.parent) {\n          ret.push(curr);\n          curr = curr.parent;\n        }\n        this.cleanUp(ret);\n        return ret.reverse();\n      }\n\n      // Normal case -- move currentNode from open to closed, process each of its neighbours.\n      currentNode.closed = true;\n\n      // Find all neighbours for the current node. Optionally find diagonal neighbours as well (false by default).\n      const neighbours = this.neighbours(graph, currentNode);\n\n      for (let i = 0, il = neighbours.length; i < il; i++) {\n        const neighbour = neighbours[i];\n\n        if (neighbour.closed) {\n          // Not a valid node to process, skip to next neighbour.\n          continue;\n        }\n\n        // The g score is the shortest distance from start to current node.\n        // We need to check if the path we have arrived at this neighbour is the shortest one we have seen yet.\n        const gScore = currentNode.g + neighbour.cost;\n        const beenVisited = neighbour.visited;\n\n        if (!beenVisited || gScore < neighbour.g) {\n\n          // Found an optimal (so far) path to this node.  Take score for node to see how good it is.\n          neighbour.visited = true;\n          neighbour.parent = currentNode;\n          if (!neighbour.centroid || !end.centroid) throw new Error('Unexpected state');\n          neighbour.h = neighbour.h || this.heuristic(neighbour.centroid, end.centroid);\n          neighbour.g = gScore;\n          neighbour.f = neighbour.g + neighbour.h;\n\n          if (!beenVisited) {\n            // Pushing to heap will put it in proper place based on the 'f' value.\n            openHeap.push(neighbour);\n          } else {\n            // Already seen the node, but since it has been rescored we need to reorder it in the heap\n            openHeap.rescoreElement(neighbour);\n          }\n        }\n      }\n    }\n\n    // No result was found - empty array signifies failure to find path.\n    return [];\n  }\n\n  static heuristic (pos1, pos2) {\n    return Utils.distanceToSquared(pos1, pos2);\n  }\n\n  static neighbours (graph, node) {\n    const ret = [];\n\n    for (let e = 0; e < node.neighbours.length; e++) {\n      ret.push(graph[node.neighbours[e]]);\n    }\n\n    return ret;\n  }\n}\n\nexport { AStar };\n","import {\n  Vector3,\n} from 'three';\n\nimport { Utils } from './Utils';\n\nclass Builder {\n  /**\n   * Constructs groups from the given navigation mesh.\n   * @param  {Geometry} geometry\n   * @return {Zone}\n   */\n  static buildZone (geometry) {\n\n    const navMesh = this._buildNavigationMesh(geometry);\n\n    const zone = {};\n\n    navMesh.vertices.forEach((v) => {\n      v.x = Utils.roundNumber(v.x, 2);\n      v.y = Utils.roundNumber(v.y, 2);\n      v.z = Utils.roundNumber(v.z, 2);\n    });\n\n    zone.vertices = navMesh.vertices;\n\n    const groups = this._buildPolygonGroups(navMesh);\n\n    // TODO: This block represents a large portion of navigation mesh construction time\n    // and could probably be optimized. For example, construct portals while\n    // determining the neighbor graph.\n    zone.groups = new Array(groups.length);\n    groups.forEach((group, groupIndex) => {\n\n      const indexByPolygon = new Map(); // { polygon: index in group }\n      group.forEach((poly, polyIndex) => { indexByPolygon.set(poly, polyIndex); });\n\n      const newGroup = new Array(group.length);\n      group.forEach((poly, polyIndex) => {\n\n        const neighbourIndices = [];\n        poly.neighbours.forEach((n) => neighbourIndices.push(indexByPolygon.get(n)));\n\n        // Build a portal list to each neighbour\n        const portals = [];\n        poly.neighbours.forEach((n) => portals.push(this._getSharedVerticesInOrder(poly, n)));\n\n        const centroid = new Vector3( 0, 0, 0 );\n        centroid.add( zone.vertices[ poly.vertexIds[0] ] );\n        centroid.add( zone.vertices[ poly.vertexIds[1] ] );\n        centroid.add( zone.vertices[ poly.vertexIds[2] ] );\n        centroid.divideScalar( 3 );\n        centroid.x = Utils.roundNumber(centroid.x, 2);\n        centroid.y = Utils.roundNumber(centroid.y, 2);\n        centroid.z = Utils.roundNumber(centroid.z, 2);\n\n        newGroup[polyIndex] = {\n          id: polyIndex,\n          neighbours: neighbourIndices,\n          vertexIds: poly.vertexIds,\n          centroid: centroid,\n          portals: portals\n        };\n      });\n\n      zone.groups[groupIndex] = newGroup;\n    });\n\n    return zone;\n  }\n\n  /**\n   * Constructs a navigation mesh from the given geometry.\n   * @param {Geometry} geometry\n   * @return {Object}\n   */\n  static _buildNavigationMesh (geometry) {\n    geometry.mergeVertices();\n    return this._buildPolygonsFromGeometry(geometry);\n  }\n\n  static _buildPolygonGroups (navigationMesh) {\n\n    const polygons = navigationMesh.polygons;\n\n    const polygonGroups = [];\n\n    const spreadGroupId = function (polygon) {\n      polygon.neighbours.forEach((neighbour) => {\n        if (neighbour.group === undefined) {\n          neighbour.group = polygon.group;\n          spreadGroupId(neighbour);\n        }\n      });\n    };\n\n    polygons.forEach((polygon) => {\n      if (polygon.group !== undefined) {\n        // this polygon is already part of a group\n        polygonGroups[polygon.group].push(polygon);\n      } else {\n        // we need to make a new group and spread its ID to neighbors\n        polygon.group = polygonGroups.length;\n        spreadGroupId(polygon);\n        polygonGroups.push([polygon]);\n      }\n    });\n\n    return polygonGroups;\n  }\n\n  static _buildPolygonNeighbours (polygon, vertexPolygonMap) {\n    const neighbours = new Set();\n\n    const groupA = vertexPolygonMap[polygon.vertexIds[0]];\n    const groupB = vertexPolygonMap[polygon.vertexIds[1]];\n    const groupC = vertexPolygonMap[polygon.vertexIds[2]];\n\n    // It's only necessary to iterate groups A and B. Polygons contained only\n    // in group C cannot share a >1 vertex with this polygon.\n    // IMPORTANT: Bublé cannot compile for-of loops.\n    groupA.forEach((candidate) => {\n      if (candidate === polygon) return;\n      if (groupB.includes(candidate) || groupC.includes(candidate)) {\n        neighbours.add(candidate);\n      }\n    });\n    groupB.forEach((candidate) => {\n      if (candidate === polygon) return;\n      if (groupC.includes(candidate)) {\n        neighbours.add(candidate);\n      }\n    });\n\n    return neighbours;\n  }\n\n  static _buildPolygonsFromGeometry (geometry) {\n\n    const polygons = [];\n    const vertices = geometry.vertices;\n\n    // Constructing the neighbor graph brute force is O(n²). To avoid that,\n    // create a map from vertices to the polygons that contain them, and use it\n    // while connecting polygons. This reduces complexity to O(n*m), where 'm'\n    // is related to connectivity of the mesh.\n    const vertexPolygonMap = new Array(vertices.length); // array of polygon objects by vertex index\n    for (let i = 0; i < vertices.length; i++) {\n      vertexPolygonMap[i] = [];\n    }\n\n    // Convert the faces into a custom format that supports more than 3 vertices\n    geometry.faces.forEach((face) => {\n      const poly = { vertexIds: [face.a, face.b, face.c], neighbours: null };\n      polygons.push(poly);\n      vertexPolygonMap[face.a].push(poly);\n      vertexPolygonMap[face.b].push(poly);\n      vertexPolygonMap[face.c].push(poly);\n    });\n\n    // Build a list of adjacent polygons\n    polygons.forEach((polygon) => {\n      polygon.neighbours = this._buildPolygonNeighbours(polygon, vertexPolygonMap);\n    });\n\n    return {\n      polygons: polygons,\n      vertices: vertices\n    };\n  }\n\n  static _getSharedVerticesInOrder (a, b) {\n\n    const aList = a.vertexIds;\n    const a0 = aList[0], a1 = aList[1], a2 = aList[2];\n\n    const bList = b.vertexIds;\n    const shared0 = bList.includes(a0);\n    const shared1 = bList.includes(a1);\n    const shared2 = bList.includes(a2);\n\n    // it seems that we shouldn't have an a and b with <2 shared vertices here unless there's a bug\n    // in the neighbor identification code, or perhaps a malformed input geometry; 3 shared vertices\n    // is a kind of embarrassing but possible geometry we should handle\n    if (shared0 && shared1 && shared2) {\n      return Array.from(aList);\n    } else if (shared0 && shared1) {\n      return [a0, a1];\n    } else if (shared1 && shared2) {\n      return [a1, a2];\n    } else if (shared0 && shared2) {\n      return [a2, a0]; // this ordering will affect the string pull algorithm later, not clear if significant\n    } else {\n      console.warn(\"Error processing navigation mesh neighbors; neighbors with <2 shared vertices found.\");\n      return [];\n    }\n  }\n}\n\nexport { Builder };\n","import { Utils } from './Utils';\n\nclass Channel {\n  constructor () {\n    this.portals = [];\n  }\n\n  push (p1, p2) {\n    if (p2 === undefined) p2 = p1;\n    this.portals.push({\n      left: p1,\n      right: p2\n    });\n  }\n\n  stringPull () {\n    const portals = this.portals;\n    const pts = [];\n    // Init scan state\n    let portalApex, portalLeft, portalRight;\n    let apexIndex = 0,\n      leftIndex = 0,\n      rightIndex = 0;\n\n    portalApex = portals[0].left;\n    portalLeft = portals[0].left;\n    portalRight = portals[0].right;\n\n    // Add start point.\n    pts.push(portalApex);\n\n    for (let i = 1; i < portals.length; i++) {\n      const left = portals[i].left;\n      const right = portals[i].right;\n\n      // Update right vertex.\n      if (Utils.triarea2(portalApex, portalRight, right) <= 0.0) {\n        if (Utils.vequal(portalApex, portalRight) || Utils.triarea2(portalApex, portalLeft, right) > 0.0) {\n          // Tighten the funnel.\n          portalRight = right;\n          rightIndex = i;\n        } else {\n          // Right over left, insert left to path and restart scan from portal left point.\n          pts.push(portalLeft);\n          // Make current left the new apex.\n          portalApex = portalLeft;\n          apexIndex = leftIndex;\n          // Reset portal\n          portalLeft = portalApex;\n          portalRight = portalApex;\n          leftIndex = apexIndex;\n          rightIndex = apexIndex;\n          // Restart scan\n          i = apexIndex;\n          continue;\n        }\n      }\n\n      // Update left vertex.\n      if (Utils.triarea2(portalApex, portalLeft, left) >= 0.0) {\n        if (Utils.vequal(portalApex, portalLeft) || Utils.triarea2(portalApex, portalRight, left) < 0.0) {\n          // Tighten the funnel.\n          portalLeft = left;\n          leftIndex = i;\n        } else {\n          // Left over right, insert right to path and restart scan from portal right point.\n          pts.push(portalRight);\n          // Make current right the new apex.\n          portalApex = portalRight;\n          apexIndex = rightIndex;\n          // Reset portal\n          portalLeft = portalApex;\n          portalRight = portalApex;\n          leftIndex = apexIndex;\n          rightIndex = apexIndex;\n          // Restart scan\n          i = apexIndex;\n          continue;\n        }\n      }\n    }\n\n    if ((pts.length === 0) || (!Utils.vequal(pts[pts.length - 1], portals[portals.length - 1].left))) {\n      // Append last point to path.\n      pts.push(portals[portals.length - 1].left);\n    }\n\n    this.path = pts;\n    return pts;\n  }\n}\n\nexport { Channel };\n","import {\n\tVector3,\n\tPlane,\n\tBufferGeometry,\n\tGeometry,\n\tTriangle,\n} from 'three';\n\nimport { Utils } from './Utils';\nimport { AStar } from './AStar';\nimport { Builder } from './Builder';\nimport { Channel } from './Channel';\n\n/**\n * Defines an instance of the pathfinding module, with one or more zones.\n */\nclass Pathfinding {\n\tconstructor () {\n\t\tthis.zones = {};\n\t}\n\n\t/**\n\t * (Static) Builds a zone/node set from navigation mesh geometry.\n\t * @param  {BufferGeometry} geometry\n\t * @return {Zone}\n\t */\n\tstatic createZone (geometry) {\n\t\tif ( geometry.isGeometry ) {\n\t\t\t// Haven't actually implemented support for BufferGeometry yet, but Geometry is somewhat\n\t\t\t// not-recommended these days, so go ahead and start warning.\n\t\t\tconsole.warn('[three-pathfinding]: Use BufferGeometry, not Geometry, to create zone.');\n\t\t} else {\n\t\t\tgeometry = new Geometry().fromBufferGeometry(geometry);\n\t\t}\n\n\t\treturn Builder.buildZone(geometry);\n\t}\n\n\t/**\n\t * Sets data for the given zone.\n\t * @param {string} zoneID\n\t * @param {Zone} zone\n\t */\n\tsetZoneData (zoneID, zone) {\n\t\tthis.zones[zoneID] = zone;\n\t}\n\n\t/**\n\t * Returns a random node within a given range of a given position.\n\t * @param  {string} zoneID\n\t * @param  {number} groupID\n\t * @param  {Vector3} nearPosition\n\t * @param  {number} nearRange\n\t * @return {Node}\n\t */\n\tgetRandomNode (zoneID, groupID, nearPosition, nearRange) {\n\n\t\tif (!this.zones[zoneID]) return new Vector3();\n\n\t\tnearPosition = nearPosition || null;\n\t\tnearRange = nearRange || 0;\n\n\t\tconst candidates = [];\n\t\tconst polygons = this.zones[zoneID].groups[groupID];\n\n\t\tpolygons.forEach((p) => {\n\t\t\tif (nearPosition && nearRange) {\n\t\t\t\tif (Utils.distanceToSquared(nearPosition, p.centroid) < nearRange * nearRange) {\n\t\t\t\t\tcandidates.push(p.centroid);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcandidates.push(p.centroid);\n\t\t\t}\n\t\t});\n\n\t\treturn Utils.sample(candidates) || new Vector3();\n\t}\n\n\t/**\n\t * Returns the closest node to the target position.\n\t * @param  {Vector3} position\n\t * @param  {string}  zoneID\n\t * @param  {number}  groupID\n\t * @param  {boolean} checkPolygon\n\t * @return {Node}\n\t */\n\tgetClosestNode (position, zoneID, groupID, checkPolygon = false) {\n\t\tconst nodes = this.zones[zoneID].groups[groupID];\n\t\tconst vertices = this.zones[zoneID].vertices;\n\t\tlet closestNode = null;\n\t\tlet closestDistance = Infinity;\n\n\t\tnodes.forEach((node) => {\n\t\t\tconst distance = Utils.distanceToSquared(node.centroid, position);\n\t\t\tif (distance < closestDistance\n\t\t\t\t\t&& (!checkPolygon || Utils.isVectorInPolygon(position, node, vertices))) {\n\t\t\t\tclosestNode = node;\n\t\t\t\tclosestDistance = distance;\n\t\t\t}\n\t\t});\n\n\t\treturn closestNode;\n\t}\n\n\t/**\n\t * Returns a path between given start and end points. If a complete path\n\t * cannot be found, will return the nearest endpoint available.\n\t *\n\t * @param  {Vector3} startPosition Start position.\n\t * @param  {Vector3} targetPosition Destination.\n\t * @param  {string} zoneID ID of current zone.\n\t * @param  {number} groupID Current group ID.\n\t * @return {Array<Vector3>} Array of points defining the path.\n\t */\n\tfindPath (startPosition, targetPosition, zoneID, groupID) {\n\t\tconst nodes = this.zones[zoneID].groups[groupID];\n\t\tconst vertices = this.zones[zoneID].vertices;\n\n\t\tconst closestNode = this.getClosestNode(startPosition, zoneID, groupID, true);\n\t\tconst farthestNode = this.getClosestNode(targetPosition, zoneID, groupID, true);\n\n\t\t// If we can't find any node, just go straight to the target\n\t\tif (!closestNode || !farthestNode) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst paths = AStar.search(nodes, closestNode, farthestNode);\n\n\t\tconst getPortalFromTo = function (a, b) {\n\t\t\tfor (var i = 0; i < a.neighbours.length; i++) {\n\t\t\t\tif (a.neighbours[i] === b.id) {\n\t\t\t\t\treturn a.portals[i];\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t// We have the corridor, now pull the rope.\n\t\tconst channel = new Channel();\n\t\tchannel.push(startPosition);\n\t\tfor (let i = 0; i < paths.length; i++) {\n\t\t\tconst polygon = paths[i];\n\t\t\tconst nextPolygon = paths[i + 1];\n\n\t\t\tif (nextPolygon) {\n\t\t\t\tconst portals = getPortalFromTo(polygon, nextPolygon);\n\t\t\t\tchannel.push(\n\t\t\t\t\tvertices[portals[0]],\n\t\t\t\t\tvertices[portals[1]]\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\tchannel.push(targetPosition);\n\t\tchannel.stringPull();\n\n\t\t// Return the path, omitting first position (which is already known).\n\t\tconst path = channel.path.map((c) => new Vector3(c.x, c.y, c.z));\n\t\tpath.shift();\n\t\treturn path;\n\t}\n}\n\n/**\n * Returns closest node group ID for given position.\n * @param  {string} zoneID\n * @param  {Vector3} position\n * @return {number}\n */\nPathfinding.prototype.getGroup = (function() {\n\tconst plane = new Plane();\n\treturn function (zoneID, position, checkPolygon = false) {\n\t\tif (!this.zones[zoneID]) return null;\n\n\t\tlet closestNodeGroup = null;\n\t\tlet distance = Math.pow(50, 2);\n\t\tconst zone = this.zones[zoneID];\n\n\t\tfor (let i = 0; i < zone.groups.length; i++) {\n\t\t\tconst group = zone.groups[i];\n\t\t\tfor (const node of group) {\n\t\t\t\tif (checkPolygon) {\n\t\t\t\t\tplane.setFromCoplanarPoints(\n\t\t\t\t\t\tzone.vertices[node.vertexIds[0]],\n\t\t\t\t\t\tzone.vertices[node.vertexIds[1]],\n\t\t\t\t\t\tzone.vertices[node.vertexIds[2]]\n\t\t\t\t\t);\n\t\t\t\t\tif (Math.abs(plane.distanceToPoint(position)) < 0.01) {\n\t\t\t\t\t\tconst poly = [\n\t\t\t\t\t\t\tzone.vertices[node.vertexIds[0]],\n\t\t\t\t\t\t\tzone.vertices[node.vertexIds[1]],\n\t\t\t\t\t\t\tzone.vertices[node.vertexIds[2]]\n\t\t\t\t\t\t];\n\t\t\t\t\t\tif(Utils.isPointInPoly(poly, position)) {\n\t\t\t\t\t\t\treturn i;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tconst measuredDistance = Utils.distanceToSquared(node.centroid, position);\n\t\t\t\tif (measuredDistance < distance) {\n\t\t\t\t\tclosestNodeGroup = i;\n\t\t\t\t\tdistance = measuredDistance;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn closestNodeGroup;\n\t};\n}());\n\n/**\n * Clamps a step along the navmesh, given start and desired endpoint. May be\n * used to constrain first-person / WASD controls.\n *\n * @param  {Vector3} start\n * @param  {Vector3} end Desired endpoint.\n * @param  {Node} node\n * @param  {string} zoneID\n * @param  {number} groupID\n * @param  {Vector3} endTarget Updated endpoint.\n * @return {Node} Updated node.\n */\nPathfinding.prototype.clampStep = (function () {\n\tconst point = new Vector3();\n\tconst plane = new Plane();\n\tconst triangle = new Triangle();\n\n\tconst endPoint = new Vector3();\n\n\tlet closestNode;\n\tlet closestPoint = new Vector3();\n\tlet closestDistance;\n\n\treturn function (startRef, endRef, node, zoneID, groupID, endTarget) {\n\t\tconst vertices = this.zones[zoneID].vertices;\n\t\tconst nodes = this.zones[zoneID].groups[groupID];\n\n\t\tconst nodeQueue = [node];\n\t\tconst nodeDepth = {};\n\t\tnodeDepth[node.id] = 0;\n\n\t\tclosestNode = undefined;\n\t\tclosestPoint.set(0, 0, 0);\n\t\tclosestDistance = Infinity;\n\n\t\t// Project the step along the current node.\n\t\tplane.setFromCoplanarPoints(\n\t\t\tvertices[node.vertexIds[0]],\n\t\t\tvertices[node.vertexIds[1]],\n\t\t\tvertices[node.vertexIds[2]]\n\t\t);\n\t\tplane.projectPoint(endRef, point);\n\t\tendPoint.copy(point);\n\n\t\tfor (let currentNode = nodeQueue.pop(); currentNode; currentNode = nodeQueue.pop()) {\n\n\t\t\ttriangle.set(\n\t\t\t\tvertices[currentNode.vertexIds[0]],\n\t\t\t\tvertices[currentNode.vertexIds[1]],\n\t\t\t\tvertices[currentNode.vertexIds[2]]\n\t\t\t);\n\n\t\t\ttriangle.closestPointToPoint(endPoint, point);\n\n\t\t\tif (point.distanceToSquared(endPoint) < closestDistance) {\n\t\t\t\tclosestNode = currentNode;\n\t\t\t\tclosestPoint.copy(point);\n\t\t\t\tclosestDistance = point.distanceToSquared(endPoint);\n\t\t\t}\n\n\t\t\tconst depth = nodeDepth[currentNode.id];\n\t\t\tif (depth > 2) continue;\n\n\t\t\tfor (let i = 0; i < currentNode.neighbours.length; i++) {\n\t\t\t\tconst neighbour = nodes[currentNode.neighbours[i]];\n\t\t\t\tif (neighbour.id in nodeDepth) continue;\n\n\t\t\t\tnodeQueue.push(neighbour);\n\t\t\t\tnodeDepth[neighbour.id] = depth + 1;\n\t\t\t}\n\t\t}\n\n\t\tendTarget.copy(closestPoint);\n\t\treturn closestNode;\n\t};\n}());\n\n/**\n * Defines a zone of interconnected groups on a navigation mesh.\n *\n * @type {Object}\n * @property {Array<Group>} groups\n * @property {Array<Vector3>} vertices\n */\nconst Zone = {}; // jshint ignore:line\n\n/**\n * Defines a group within a navigation mesh.\n *\n * @type {Object}\n */\nconst Group = {}; // jshint ignore:line\n\n/**\n * Defines a node (or polygon) within a group.\n *\n * @type {Object}\n * @property {number} id\n * @property {Array<number>} neighbours IDs of neighboring nodes.\n * @property {Array<number>} vertexIds\n * @property {Vector3} centroid\n * @property {Array<Array<number>>} portals Array of portals, each defined by two vertex IDs.\n * @property {boolean} closed\n * @property {number} cost\n */\nconst Node = {}; // jshint ignore:line\n\nexport { Pathfinding };\n","import {\r\n  Color,\r\n  Object3D,\r\n  LineBasicMaterial,\r\n  MeshBasicMaterial,\r\n  SphereBufferGeometry,\r\n  BoxGeometry,\r\n  Mesh,\r\n  SphereGeometry,\r\n  Geometry,\r\n  Vector3,\r\n  Line,\r\n} from 'three';\r\n\r\nconst colors = {\r\n  PLAYER: new Color( 0xee836f ).convertGammaToLinear( 2.2 ).getHex(),\r\n  TARGET: new Color( 0xdccb18 ).convertGammaToLinear( 2.2 ).getHex(),\r\n  PATH: new Color( 0x00a3af ).convertGammaToLinear( 2.2 ).getHex(),\r\n  WAYPOINT: new Color( 0x00a3af ).convertGammaToLinear( 2.2 ).getHex(),\r\n  CLAMPED_STEP: new Color( 0xdcd3b2 ).convertGammaToLinear( 2.2 ).getHex(),\r\n  CLOSEST_NODE: new Color( 0x43676b ).convertGammaToLinear( 2.2 ).getHex(),\r\n};\r\n\r\nconst OFFSET = 0.2;\r\n\r\n/**\r\n * Helper for debugging pathfinding behavior.\r\n */\r\nclass PathfindingHelper extends Object3D {\r\n  constructor () {\r\n    super();\r\n\r\n    this._playerMarker = new Mesh(\r\n      new SphereGeometry( 0.25, 32, 32 ),\r\n      new MeshBasicMaterial( { color: colors.PLAYER } )\r\n    );\r\n\r\n    this._targetMarker = new Mesh(\r\n      new BoxGeometry( 0.3, 0.3, 0.3 ),\r\n      new MeshBasicMaterial( { color: colors.TARGET } )\r\n    );\r\n    \r\n\r\n    this._nodeMarker = new Mesh(\r\n      new BoxGeometry( 0.1, 0.8, 0.1 ),\r\n      new MeshBasicMaterial( { color: colors.CLOSEST_NODE } )\r\n    );\r\n    \r\n\r\n    this._stepMarker = new Mesh(\r\n      new BoxGeometry( 0.1, 1, 0.1 ),\r\n      new MeshBasicMaterial( { color: colors.CLAMPED_STEP } )\r\n    );\r\n\r\n    this._pathMarker = new Object3D();\r\n\r\n    this._pathLineMaterial = new LineBasicMaterial( { color: colors.PATH, linewidth: 2 } ) ;\r\n    this._pathPointMaterial = new MeshBasicMaterial( { color: colors.WAYPOINT } );\r\n    this._pathPointGeometry = new SphereBufferGeometry( 0.08 );\r\n\r\n    this._markers = [\r\n      this._playerMarker,\r\n      this._targetMarker,\r\n      this._nodeMarker,\r\n      this._stepMarker,\r\n      this._pathMarker,\r\n    ];\r\n\r\n    this._markers.forEach( ( marker ) => {\r\n\r\n      marker.visible = false;\r\n\r\n      this.add( marker );\r\n\r\n    } );\r\n\r\n  }\r\n\r\n  /**\r\n   * @param {Array<Vector3>} path\r\n   * @return {this}\r\n   */\r\n  setPath ( path ) {\r\n\r\n    while ( this._pathMarker.children.length ) {\r\n\r\n      this._pathMarker.children[ 0 ].visible = false;\r\n      this._pathMarker.remove( this._pathMarker.children[ 0 ] );\r\n\r\n    }\r\n\r\n    path = [ this._playerMarker.position ].concat( path );\r\n\r\n    // Draw debug lines\r\n    const geometry = new Geometry();\r\n    for (let i = 0; i < path.length; i++) {\r\n      geometry.vertices.push( path[ i ].clone().add( new Vector3( 0, OFFSET, 0 ) ) );\r\n    }\r\n    this._pathMarker.add( new Line( geometry, this._pathLineMaterial ) );\r\n\r\n    for ( let i = 0; i < path.length - 1; i++ ) {\r\n\r\n      const node = new Mesh( this._pathPointGeometry, this._pathPointMaterial );\r\n      node.position.copy( path[ i ] );\r\n      node.position.y += OFFSET;\r\n      this._pathMarker.add( node );\r\n\r\n    }\r\n\r\n    this._pathMarker.visible = true;\r\n\r\n    return this;\r\n\r\n  }\r\n\r\n  /**\r\n   * @param {Vector3} position\r\n   * @return {this}\r\n   */\r\n  setPlayerPosition( position ) {\r\n\r\n    this._playerMarker.position.copy( position );\r\n    this._playerMarker.visible = true;\r\n    return this;\r\n\r\n  }\r\n\r\n  /**\r\n   * @param {Vector3} position\r\n   * @return {this}\r\n   */\r\n  setTargetPosition( position ) {\r\n\r\n    this._targetMarker.position.copy( position );\r\n    this._targetMarker.visible = true;\r\n    return this;\r\n\r\n  }\r\n\r\n  /**\r\n   * @param {Vector3} position\r\n   * @return {this}\r\n   */\r\n  setNodePosition( position ) {\r\n\r\n    this._nodeMarker.position.copy( position );\r\n    this._nodeMarker.visible = true;\r\n    return this;\r\n\r\n  }\r\n\r\n  /**\r\n   * @param {Vector3} position\r\n   * @return {this}\r\n   */\r\n  setStepPosition( position ) {\r\n\r\n    this._stepMarker.position.copy( position );\r\n    this._stepMarker.visible = true;\r\n    return this;\r\n\r\n  }\r\n\r\n  /**\r\n   * Hides all markers.\r\n   * @return {this}\r\n   */\r\n  reset () {\r\n\r\n    while ( this._pathMarker.children.length ) {\r\n\r\n      this._pathMarker.children[ 0 ].visible = false;\r\n      this._pathMarker.remove( this._pathMarker.children[ 0 ] );\r\n\r\n    }\r\n\r\n    this._markers.forEach( ( marker ) => {\r\n\r\n      marker.visible = false;\r\n\r\n    } );\r\n\r\n    return this;\r\n\r\n  }\r\n\r\n}\r\n\r\nexport { PathfindingHelper };\r\n"],"names":["Vector3","Geometry","Plane","Triangle","Color","Object3D","Mesh","SphereGeometry","MeshBasicMaterial","BoxGeometry","LineBasicMaterial","SphereBufferGeometry","Line"],"mappings":"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"}