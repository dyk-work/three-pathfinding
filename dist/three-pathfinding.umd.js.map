{"version":3,"file":"three-pathfinding.umd.js","sources":["../src/Utils.js","../src/BinaryHeap.js","../src/AStar.js","../src/Builder.js","../src/Channel.js","../src/Pathfinding.js","../src/PathfindingHelper.js"],"sourcesContent":["class Utils {\n\n  static roundNumber (value, decimals) {\n    const factor = Math.pow(10, decimals);\n    return Math.round(value * factor) / factor;\n  }\n\n  static sample (list) {\n    return list[Math.floor(Math.random() * list.length)];\n  }\n\n  static distanceToSquared (a, b) {\n\n    var dx = a.x - b.x;\n    var dy = a.y - b.y;\n    var dz = a.z - b.z;\n\n    return dx * dx + dy * dy + dz * dz;\n\n  }\n\n  //+ Jonas Raoni Soares Silva\n  //@ http://jsfromhell.com/math/is-point-in-poly [rev. #0]\n  static isPointInPoly (poly, pt) {\n    for (var c = false, i = -1, l = poly.length, j = l - 1; ++i < l; j = i)\n      ((poly[i].z <= pt.z && pt.z < poly[j].z) || (poly[j].z <= pt.z && pt.z < poly[i].z)) && (pt.x < (poly[j].x - poly[i].x) * (pt.z - poly[i].z) / (poly[j].z - poly[i].z) + poly[i].x) && (c = !c);\n    return c;\n  }\n\n  static isVectorInPolygon (vector, polygon, vertices) {\n\n    // reference point will be the centroid of the polygon\n    // We need to rotate the vector as well as all the points which the polygon uses\n\n    var lowestPoint = 100000;\n    var highestPoint = -100000;\n\n    var polygonVertices = [];\n\n    polygon.vertexIds.forEach((vId) => {\n      lowestPoint = Math.min(vertices[vId].y, lowestPoint);\n      highestPoint = Math.max(vertices[vId].y, highestPoint);\n      polygonVertices.push(vertices[vId]);\n    });\n\n    if (vector.y < highestPoint + 0.5 && vector.y > lowestPoint - 0.5 &&\n      this.isPointInPoly(polygonVertices, vector)) {\n      return true;\n    }\n    return false;\n  }\n\n  static triarea2 (a, b, c) {\n    var ax = b.x - a.x;\n    var az = b.z - a.z;\n    var bx = c.x - a.x;\n    var bz = c.z - a.z;\n    return bx * az - ax * bz;\n  }\n\n  static vequal (a, b) {\n    return this.distanceToSquared(a, b) < 0.00001;\n  }\n}\n\nexport { Utils };\n","// javascript-astar\n// http://github.com/bgrins/javascript-astar\n// Freely distributable under the MIT License.\n// Implements the astar search algorithm in javascript using a binary heap.\n\nclass BinaryHeap {\n  constructor (scoreFunction) {\n    this.content = [];\n    this.scoreFunction = scoreFunction;\n  }\n\n  push (element) {\n    // Add the new element to the end of the array.\n    this.content.push(element);\n\n    // Allow it to sink down.\n    this.sinkDown(this.content.length - 1);\n  }\n\n  pop () {\n    // Store the first element so we can return it later.\n    const result = this.content[0];\n    // Get the element at the end of the array.\n    const end = this.content.pop();\n    // If there are any elements left, put the end element at the\n    // start, and let it bubble up.\n    if (this.content.length > 0) {\n      this.content[0] = end;\n      this.bubbleUp(0);\n    }\n    return result;\n  }\n\n  remove (node) {\n    const i = this.content.indexOf(node);\n\n    // When it is found, the process seen in 'pop' is repeated\n    // to fill up the hole.\n    const end = this.content.pop();\n\n    if (i !== this.content.length - 1) {\n      this.content[i] = end;\n\n      if (this.scoreFunction(end) < this.scoreFunction(node)) {\n        this.sinkDown(i);\n      } else {\n        this.bubbleUp(i);\n      }\n    }\n  }\n\n  size () {\n    return this.content.length;\n  }\n\n  rescoreElement (node) {\n    this.sinkDown(this.content.indexOf(node));\n  }\n\n  sinkDown (n) {\n    // Fetch the element that has to be sunk.\n    const element = this.content[n];\n\n    // When at 0, an element can not sink any further.\n    while (n > 0) {\n      // Compute the parent element's index, and fetch it.\n      const parentN = ((n + 1) >> 1) - 1;\n      const parent = this.content[parentN];\n\n      if (this.scoreFunction(element) < this.scoreFunction(parent)) {\n        // Swap the elements if the parent is greater.\n        this.content[parentN] = element;\n        this.content[n] = parent;\n        // Update 'n' to continue at the new position.\n        n = parentN;\n      } else {\n        // Found a parent that is less, no need to sink any further.\n        break;\n      }\n    }\n  }\n\n  bubbleUp (n) {\n    // Look up the target element and its score.\n    const length = this.content.length,\n      element = this.content[n],\n      elemScore = this.scoreFunction(element);\n\n    while (true) {\n      // Compute the indices of the child elements.\n      const child2N = (n + 1) << 1,\n        child1N = child2N - 1;\n      // This is used to store the new position of the element,\n      // if any.\n      let swap = null;\n      let child1Score;\n      // If the first child exists (is inside the array)...\n      if (child1N < length) {\n        // Look it up and compute its score.\n        const child1 = this.content[child1N];\n        child1Score = this.scoreFunction(child1);\n\n        // If the score is less than our element's, we need to swap.\n        if (child1Score < elemScore) {\n          swap = child1N;\n        }\n      }\n\n      // Do the same checks for the other child.\n      if (child2N < length) {\n        const child2 = this.content[child2N],\n          child2Score = this.scoreFunction(child2);\n        if (child2Score < (swap === null ? elemScore : child1Score)) {\n          swap = child2N;\n        }\n      }\n\n      // If the element needs to be moved, swap it, and continue.\n      if (swap !== null) {\n        this.content[n] = this.content[swap];\n        this.content[swap] = element;\n        n = swap;\n      }\n\n      // Otherwise, we are done.\n      else {\n        break;\n      }\n    }\n  }\n\n}\n\nexport { BinaryHeap };\n","import { BinaryHeap } from './BinaryHeap';\nimport { Utils } from './Utils.js';\n\nclass AStar {\n  static init (graph) {\n    for (let x = 0; x < graph.length; x++) {\n      //for(var x in graph) {\n      const node = graph[x];\n      node.f = 0;\n      node.g = 0;\n      node.h = 0;\n      node.cost = 1.0;\n      node.visited = false;\n      node.closed = false;\n      node.parent = null;\n    }\n  }\n\n  static cleanUp (graph) {\n    for (let x = 0; x < graph.length; x++) {\n      const node = graph[x];\n      delete node.f;\n      delete node.g;\n      delete node.h;\n      delete node.cost;\n      delete node.visited;\n      delete node.closed;\n      delete node.parent;\n    }\n  }\n\n  static heap () {\n    return new BinaryHeap(function (node) {\n      return node.f;\n    });\n  }\n\n  static search (graph, start, end) {\n    this.init(graph);\n    //heuristic = heuristic || astar.manhattan;\n\n\n    const openHeap = this.heap();\n\n    openHeap.push(start);\n\n    while (openHeap.size() > 0) {\n\n      // Grab the lowest f(x) to process next.  Heap keeps this sorted for us.\n      const currentNode = openHeap.pop();\n\n      // End case -- result has been found, return the traced path.\n      if (currentNode === end) {\n        let curr = currentNode;\n        const ret = [];\n        while (curr.parent) {\n          ret.push(curr);\n          curr = curr.parent;\n        }\n        this.cleanUp(ret);\n        return ret.reverse();\n      }\n\n      // Normal case -- move currentNode from open to closed, process each of its neighbours.\n      currentNode.closed = true;\n\n      // Find all neighbours for the current node. Optionally find diagonal neighbours as well (false by default).\n      const neighbours = this.neighbours(graph, currentNode);\n\n      for (let i = 0, il = neighbours.length; i < il; i++) {\n        const neighbour = neighbours[i];\n\n        if (neighbour.closed) {\n          // Not a valid node to process, skip to next neighbour.\n          continue;\n        }\n\n        // The g score is the shortest distance from start to current node.\n        // We need to check if the path we have arrived at this neighbour is the shortest one we have seen yet.\n        const gScore = currentNode.g + neighbour.cost;\n        const beenVisited = neighbour.visited;\n\n        if (!beenVisited || gScore < neighbour.g) {\n\n          // Found an optimal (so far) path to this node.  Take score for node to see how good it is.\n          neighbour.visited = true;\n          neighbour.parent = currentNode;\n          if (!neighbour.centroid || !end.centroid) throw new Error('Unexpected state');\n          neighbour.h = neighbour.h || this.heuristic(neighbour.centroid, end.centroid);\n          neighbour.g = gScore;\n          neighbour.f = neighbour.g + neighbour.h;\n\n          if (!beenVisited) {\n            // Pushing to heap will put it in proper place based on the 'f' value.\n            openHeap.push(neighbour);\n          } else {\n            // Already seen the node, but since it has been rescored we need to reorder it in the heap\n            openHeap.rescoreElement(neighbour);\n          }\n        }\n      }\n    }\n\n    // No result was found - empty array signifies failure to find path.\n    return [];\n  }\n\n  static heuristic (pos1, pos2) {\n    return Utils.distanceToSquared(pos1, pos2);\n  }\n\n  static neighbours (graph, node) {\n    const ret = [];\n\n    for (let e = 0; e < node.neighbours.length; e++) {\n      ret.push(graph[node.neighbours[e]]);\n    }\n\n    return ret;\n  }\n}\n\nexport { AStar };\n","import {\n  Vector3,\n} from 'three';\n\nimport { Utils } from './Utils';\n\nclass Builder {\n  /**\n   * Constructs groups from the given navigation mesh.\n   * @param  {Geometry} geometry\n   * @return {Zone}\n   */\n  static buildZone (geometry) {\n\n    const navMesh = this._buildNavigationMesh(geometry);\n\n    const zone = {};\n\n    navMesh.vertices.forEach((v) => {\n      v.x = Utils.roundNumber(v.x, 2);\n      v.y = Utils.roundNumber(v.y, 2);\n      v.z = Utils.roundNumber(v.z, 2);\n    });\n\n    zone.vertices = navMesh.vertices;\n\n    const groups = this._buildPolygonGroups(navMesh);\n\n    // TODO: This block represents a large portion of navigation mesh construction time\n    // and could probably be optimized. For example, construct portals while\n    // determining the neighbor graph.\n    zone.groups = new Array(groups.length);\n    groups.forEach((group, groupIndex) => {\n\n      const indexByPolygon = new Map(); // { polygon: index in group }\n      group.forEach((poly, polyIndex) => { indexByPolygon.set(poly, polyIndex); });\n\n      const newGroup = new Array(group.length);\n      group.forEach((poly, polyIndex) => {\n\n        const neighbourIndices = [];\n        poly.neighbours.forEach((n) => neighbourIndices.push(indexByPolygon.get(n)));\n\n        // Build a portal list to each neighbour\n        const portals = [];\n        poly.neighbours.forEach((n) => portals.push(this._getSharedVerticesInOrder(poly, n)));\n\n        const centroid = new Vector3( 0, 0, 0 );\n        centroid.add( zone.vertices[ poly.vertexIds[0] ] );\n        centroid.add( zone.vertices[ poly.vertexIds[1] ] );\n        centroid.add( zone.vertices[ poly.vertexIds[2] ] );\n        centroid.divideScalar( 3 );\n        centroid.x = Utils.roundNumber(centroid.x, 2);\n        centroid.y = Utils.roundNumber(centroid.y, 2);\n        centroid.z = Utils.roundNumber(centroid.z, 2);\n\n        newGroup[polyIndex] = {\n          id: polyIndex,\n          neighbours: neighbourIndices,\n          vertexIds: poly.vertexIds,\n          centroid: centroid,\n          portals: portals\n        };\n      });\n\n      zone.groups[groupIndex] = newGroup;\n    });\n\n    return zone;\n  }\n\n  /**\n   * Constructs a navigation mesh from the given geometry.\n   * @param {Geometry} geometry\n   * @return {Object}\n   */\n  static _buildNavigationMesh (geometry) {\n    geometry.mergeVertices();\n    return this._buildPolygonsFromGeometry(geometry);\n  }\n\n  static _buildPolygonGroups (navigationMesh) {\n\n    const polygons = navigationMesh.polygons;\n\n    const polygonGroups = [];\n\n    const spreadGroupId = function (polygon) {\n      polygon.neighbours.forEach((neighbour) => {\n        if (neighbour.group === undefined) {\n          neighbour.group = polygon.group;\n          spreadGroupId(neighbour);\n        }\n      });\n    };\n\n    polygons.forEach((polygon) => {\n      if (polygon.group !== undefined) {\n        // this polygon is already part of a group\n        polygonGroups[polygon.group].push(polygon);\n      } else {\n        // we need to make a new group and spread its ID to neighbors\n        polygon.group = polygonGroups.length;\n        spreadGroupId(polygon);\n        polygonGroups.push([polygon]);\n      }\n    });\n\n    return polygonGroups;\n  }\n\n  static _buildPolygonNeighbours (polygon, vertexPolygonMap) {\n    const neighbours = new Set();\n\n    const groupA = vertexPolygonMap[polygon.vertexIds[0]];\n    const groupB = vertexPolygonMap[polygon.vertexIds[1]];\n    const groupC = vertexPolygonMap[polygon.vertexIds[2]];\n\n    // It's only necessary to iterate groups A and B. Polygons contained only\n    // in group C cannot share a >1 vertex with this polygon.\n    // IMPORTANT: Bublé cannot compile for-of loops.\n    groupA.forEach((candidate) => {\n      if (candidate === polygon) return;\n      if (groupB.includes(candidate) || groupC.includes(candidate)) {\n        neighbours.add(candidate);\n      }\n    });\n    groupB.forEach((candidate) => {\n      if (candidate === polygon) return;\n      if (groupC.includes(candidate)) {\n        neighbours.add(candidate);\n      }\n    });\n\n    return neighbours;\n  }\n\n  static _buildPolygonsFromGeometry (geometry) {\n\n    const polygons = [];\n    const vertices = geometry.vertices;\n\n    // Constructing the neighbor graph brute force is O(n²). To avoid that,\n    // create a map from vertices to the polygons that contain them, and use it\n    // while connecting polygons. This reduces complexity to O(n*m), where 'm'\n    // is related to connectivity of the mesh.\n    const vertexPolygonMap = new Array(vertices.length); // array of polygon objects by vertex index\n    for (let i = 0; i < vertices.length; i++) {\n      vertexPolygonMap[i] = [];\n    }\n\n    // Convert the faces into a custom format that supports more than 3 vertices\n    geometry.faces.forEach((face) => {\n      const poly = { vertexIds: [face.a, face.b, face.c], neighbours: null };\n      polygons.push(poly);\n      vertexPolygonMap[face.a].push(poly);\n      vertexPolygonMap[face.b].push(poly);\n      vertexPolygonMap[face.c].push(poly);\n    });\n\n    // Build a list of adjacent polygons\n    polygons.forEach((polygon) => {\n      polygon.neighbours = this._buildPolygonNeighbours(polygon, vertexPolygonMap);\n    });\n\n    return {\n      polygons: polygons,\n      vertices: vertices\n    };\n  }\n\n  static _getSharedVerticesInOrder (a, b) {\n\n    const aList = a.vertexIds;\n    const a0 = aList[0], a1 = aList[1], a2 = aList[2];\n\n    const bList = b.vertexIds;\n    const shared0 = bList.includes(a0);\n    const shared1 = bList.includes(a1);\n    const shared2 = bList.includes(a2);\n\n    // it seems that we shouldn't have an a and b with <2 shared vertices here unless there's a bug\n    // in the neighbor identification code, or perhaps a malformed input geometry; 3 shared vertices\n    // is a kind of embarrassing but possible geometry we should handle\n    if (shared0 && shared1 && shared2) {\n      return Array.from(aList);\n    } else if (shared0 && shared1) {\n      return [a0, a1];\n    } else if (shared1 && shared2) {\n      return [a1, a2];\n    } else if (shared0 && shared2) {\n      return [a2, a0]; // this ordering will affect the string pull algorithm later, not clear if significant\n    } else {\n      console.warn(\"Error processing navigation mesh neighbors; neighbors with <2 shared vertices found.\");\n      return [];\n    }\n  }\n}\n\nexport { Builder };\n","import { Utils } from './Utils';\n\nclass Channel {\n  constructor () {\n    this.portals = [];\n  }\n\n  push (p1, p2) {\n    if (p2 === undefined) p2 = p1;\n    this.portals.push({\n      left: p1,\n      right: p2\n    });\n  }\n\n  stringPull () {\n    const portals = this.portals;\n    const pts = [];\n    // Init scan state\n    let portalApex, portalLeft, portalRight;\n    let apexIndex = 0,\n      leftIndex = 0,\n      rightIndex = 0;\n\n    portalApex = portals[0].left;\n    portalLeft = portals[0].left;\n    portalRight = portals[0].right;\n\n    // Add start point.\n    pts.push(portalApex);\n\n    for (let i = 1; i < portals.length; i++) {\n      const left = portals[i].left;\n      const right = portals[i].right;\n\n      // Update right vertex.\n      if (Utils.triarea2(portalApex, portalRight, right) <= 0.0) {\n        if (Utils.vequal(portalApex, portalRight) || Utils.triarea2(portalApex, portalLeft, right) > 0.0) {\n          // Tighten the funnel.\n          portalRight = right;\n          rightIndex = i;\n        } else {\n          // Right over left, insert left to path and restart scan from portal left point.\n          pts.push(portalLeft);\n          // Make current left the new apex.\n          portalApex = portalLeft;\n          apexIndex = leftIndex;\n          // Reset portal\n          portalLeft = portalApex;\n          portalRight = portalApex;\n          leftIndex = apexIndex;\n          rightIndex = apexIndex;\n          // Restart scan\n          i = apexIndex;\n          continue;\n        }\n      }\n\n      // Update left vertex.\n      if (Utils.triarea2(portalApex, portalLeft, left) >= 0.0) {\n        if (Utils.vequal(portalApex, portalLeft) || Utils.triarea2(portalApex, portalRight, left) < 0.0) {\n          // Tighten the funnel.\n          portalLeft = left;\n          leftIndex = i;\n        } else {\n          // Left over right, insert right to path and restart scan from portal right point.\n          pts.push(portalRight);\n          // Make current right the new apex.\n          portalApex = portalRight;\n          apexIndex = rightIndex;\n          // Reset portal\n          portalLeft = portalApex;\n          portalRight = portalApex;\n          leftIndex = apexIndex;\n          rightIndex = apexIndex;\n          // Restart scan\n          i = apexIndex;\n          continue;\n        }\n      }\n    }\n\n    if ((pts.length === 0) || (!Utils.vequal(pts[pts.length - 1], portals[portals.length - 1].left))) {\n      // Append last point to path.\n      pts.push(portals[portals.length - 1].left);\n    }\n\n    this.path = pts;\n    return pts;\n  }\n}\n\nexport { Channel };\n","import {\n\tVector3,\n\tPlane,\n\tBufferGeometry,\n\tGeometry,\n\tTriangle,\n} from 'three';\n\nimport { Utils } from './Utils';\nimport { AStar } from './AStar';\nimport { Builder } from './Builder';\nimport { Channel } from './Channel';\n\n/**\n * Defines an instance of the pathfinding module, with one or more zones.\n */\nclass Pathfinding {\n\tconstructor () {\n\t\tthis.zones = {};\n\t}\n\n\t/**\n\t * (Static) Builds a zone/node set from navigation mesh geometry.\n\t * @param  {BufferGeometry} geometry\n\t * @return {Zone}\n\t */\n\tstatic createZone (geometry) {\n\t\tif ( geometry.isGeometry ) {\n\t\t\t// Haven't actually implemented support for BufferGeometry yet, but Geometry is somewhat\n\t\t\t// not-recommended these days, so go ahead and start warning.\n\t\t\tconsole.warn('[three-pathfinding]: Use BufferGeometry, not Geometry, to create zone.');\n\t\t} else {\n\t\t\tgeometry = new Geometry().fromBufferGeometry(geometry);\n\t\t}\n\n\t\treturn Builder.buildZone(geometry);\n\t}\n\n\t/**\n\t * Sets data for the given zone.\n\t * @param {string} zoneID\n\t * @param {Zone} zone\n\t */\n\tsetZoneData (zoneID, zone) {\n\t\tthis.zones[zoneID] = zone;\n\t}\n\n\t/**\n\t * Returns a random node within a given range of a given position.\n\t * @param  {string} zoneID\n\t * @param  {number} groupID\n\t * @param  {Vector3} nearPosition\n\t * @param  {number} nearRange\n\t * @return {Node}\n\t */\n\tgetRandomNode (zoneID, groupID, nearPosition, nearRange) {\n\n\t\tif (!this.zones[zoneID]) return new Vector3();\n\n\t\tnearPosition = nearPosition || null;\n\t\tnearRange = nearRange || 0;\n\n\t\tconst candidates = [];\n\t\tconst polygons = this.zones[zoneID].groups[groupID];\n\n\t\tpolygons.forEach((p) => {\n\t\t\tif (nearPosition && nearRange) {\n\t\t\t\tif (Utils.distanceToSquared(nearPosition, p.centroid) < nearRange * nearRange) {\n\t\t\t\t\tcandidates.push(p.centroid);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcandidates.push(p.centroid);\n\t\t\t}\n\t\t});\n\n\t\treturn Utils.sample(candidates) || new Vector3();\n\t}\n\n\t/**\n\t * Returns the closest node to the target position.\n\t * @param  {Vector3} position\n\t * @param  {string}  zoneID\n\t * @param  {number}  groupID\n\t * @param  {boolean} checkPolygon\n\t * @return {Node}\n\t */\n\tgetClosestNode (position, zoneID, groupID, checkPolygon = false) {\n\t\tconst nodes = this.zones[zoneID].groups[groupID];\n\t\tconst vertices = this.zones[zoneID].vertices;\n\t\tlet closestNode = null;\n\t\tlet closestDistance = Infinity;\n\n\t\tnodes.forEach((node) => {\n\t\t\tconst distance = Utils.distanceToSquared(node.centroid, position);\n\t\t\tif (distance < closestDistance\n\t\t\t\t\t&& (!checkPolygon || Utils.isVectorInPolygon(position, node, vertices))) {\n\t\t\t\tclosestNode = node;\n\t\t\t\tclosestDistance = distance;\n\t\t\t}\n\t\t});\n\n\t\treturn closestNode;\n\t}\n\n\t/**\n\t * Returns a path between given start and end points. If a complete path\n\t * cannot be found, will return the nearest endpoint available.\n\t *\n\t * @param  {Vector3} startPosition Start position.\n\t * @param  {Vector3} targetPosition Destination.\n\t * @param  {string} zoneID ID of current zone.\n\t * @param  {number} groupID Current group ID.\n\t * @return {Array<Vector3>} Array of points defining the path.\n\t */\n\tfindPath (startPosition, targetPosition, zoneID, groupID) {\n\t\tconst nodes = this.zones[zoneID].groups[groupID];\n\t\tconst vertices = this.zones[zoneID].vertices;\n\n\t\tconst closestNode = this.getClosestNode(startPosition, zoneID, groupID, true);\n\t\tconst farthestNode = this.getClosestNode(targetPosition, zoneID, groupID, true);\n\n\t\t// If we can't find any node, just go straight to the target\n\t\tif (!closestNode || !farthestNode) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst paths = AStar.search(nodes, closestNode, farthestNode);\n\n\t\tconst getPortalFromTo = function (a, b) {\n\t\t\tfor (var i = 0; i < a.neighbours.length; i++) {\n\t\t\t\tif (a.neighbours[i] === b.id) {\n\t\t\t\t\treturn a.portals[i];\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t// We have the corridor, now pull the rope.\n\t\tconst channel = new Channel();\n\t\tchannel.push(startPosition);\n\t\tfor (let i = 0; i < paths.length; i++) {\n\t\t\tconst polygon = paths[i];\n\t\t\tconst nextPolygon = paths[i + 1];\n\n\t\t\tif (nextPolygon) {\n\t\t\t\tconst portals = getPortalFromTo(polygon, nextPolygon);\n\t\t\t\tchannel.push(\n\t\t\t\t\tvertices[portals[0]],\n\t\t\t\t\tvertices[portals[1]]\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\tchannel.push(targetPosition);\n\t\tchannel.stringPull();\n\n\t\t// Return the path, omitting first position (which is already known).\n\t\tconst path = channel.path.map((c) => new Vector3(c.x, c.y, c.z));\n\t\tpath.shift();\n\t\treturn path;\n\t}\n}\n\n/**\n * Returns closest node group ID for given position.\n * @param  {string} zoneID\n * @param  {Vector3} position\n * @return {number}\n */\nPathfinding.prototype.getGroup = (function() {\n\tconst plane = new Plane();\n\treturn function (zoneID, position, checkPolygon = false) {\n\t\tif (!this.zones[zoneID]) return null;\n\n\t\tlet closestNodeGroup = null;\n\t\tlet distance = Math.pow(50, 2);\n\t\tconst zone = this.zones[zoneID];\n\n\t\tfor (let i = 0; i < zone.groups.length; i++) {\n\t\t\tconst group = zone.groups[i];\n\t\t\tfor (const node of group) {\n\t\t\t\tif (checkPolygon) {\n\t\t\t\t\tplane.setFromCoplanarPoints(\n\t\t\t\t\t\tzone.vertices[node.vertexIds[0]],\n\t\t\t\t\t\tzone.vertices[node.vertexIds[1]],\n\t\t\t\t\t\tzone.vertices[node.vertexIds[2]]\n\t\t\t\t\t);\n\t\t\t\t\tif (Math.abs(plane.distanceToPoint(position)) < 0.01) {\n\t\t\t\t\t\tconst poly = [\n\t\t\t\t\t\t\tzone.vertices[node.vertexIds[0]],\n\t\t\t\t\t\t\tzone.vertices[node.vertexIds[1]],\n\t\t\t\t\t\t\tzone.vertices[node.vertexIds[2]]\n\t\t\t\t\t\t];\n\t\t\t\t\t\tif(Utils.isPointInPoly(poly, position)) {\n\t\t\t\t\t\t\treturn i;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tconst measuredDistance = Utils.distanceToSquared(node.centroid, position);\n\t\t\t\tif (measuredDistance < distance) {\n\t\t\t\t\tclosestNodeGroup = i;\n\t\t\t\t\tdistance = measuredDistance;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn closestNodeGroup;\n\t};\n}());\n\n/**\n * Clamps a step along the navmesh, given start and desired endpoint. May be\n * used to constrain first-person / WASD controls.\n *\n * @param  {Vector3} start\n * @param  {Vector3} end Desired endpoint.\n * @param  {Node} node\n * @param  {string} zoneID\n * @param  {number} groupID\n * @param  {Vector3} endTarget Updated endpoint.\n * @return {Node} Updated node.\n */\nPathfinding.prototype.clampStep = (function () {\n\tconst point = new Vector3();\n\tconst plane = new Plane();\n\tconst triangle = new Triangle();\n\n\tconst endPoint = new Vector3();\n\n\tlet closestNode;\n\tlet closestPoint = new Vector3();\n\tlet closestDistance;\n\n\treturn function (startRef, endRef, node, zoneID, groupID, endTarget) {\n\t\tconst vertices = this.zones[zoneID].vertices;\n\t\tconst nodes = this.zones[zoneID].groups[groupID];\n\n\t\tconst nodeQueue = [node];\n\t\tconst nodeDepth = {};\n\t\tnodeDepth[node.id] = 0;\n\n\t\tclosestNode = undefined;\n\t\tclosestPoint.set(0, 0, 0);\n\t\tclosestDistance = Infinity;\n\n\t\t// Project the step along the current node.\n\t\tplane.setFromCoplanarPoints(\n\t\t\tvertices[node.vertexIds[0]],\n\t\t\tvertices[node.vertexIds[1]],\n\t\t\tvertices[node.vertexIds[2]]\n\t\t);\n\t\tplane.projectPoint(endRef, point);\n\t\tendPoint.copy(point);\n\n\t\tfor (let currentNode = nodeQueue.pop(); currentNode; currentNode = nodeQueue.pop()) {\n\n\t\t\ttriangle.set(\n\t\t\t\tvertices[currentNode.vertexIds[0]],\n\t\t\t\tvertices[currentNode.vertexIds[1]],\n\t\t\t\tvertices[currentNode.vertexIds[2]]\n\t\t\t);\n\n\t\t\ttriangle.closestPointToPoint(endPoint, point);\n\n\t\t\tif (point.distanceToSquared(endPoint) < closestDistance) {\n\t\t\t\tclosestNode = currentNode;\n\t\t\t\tclosestPoint.copy(point);\n\t\t\t\tclosestDistance = point.distanceToSquared(endPoint);\n\t\t\t}\n\n\t\t\tconst depth = nodeDepth[currentNode.id];\n\t\t\tif (depth > 2) continue;\n\n\t\t\tfor (let i = 0; i < currentNode.neighbours.length; i++) {\n\t\t\t\tconst neighbour = nodes[currentNode.neighbours[i]];\n\t\t\t\tif (neighbour.id in nodeDepth) continue;\n\n\t\t\t\tnodeQueue.push(neighbour);\n\t\t\t\tnodeDepth[neighbour.id] = depth + 1;\n\t\t\t}\n\t\t}\n\n\t\tendTarget.copy(closestPoint);\n\t\treturn closestNode;\n\t};\n}());\n\n/**\n * Defines a zone of interconnected groups on a navigation mesh.\n *\n * @type {Object}\n * @property {Array<Group>} groups\n * @property {Array<Vector3>} vertices\n */\nconst Zone = {}; // jshint ignore:line\n\n/**\n * Defines a group within a navigation mesh.\n *\n * @type {Object}\n */\nconst Group = {}; // jshint ignore:line\n\n/**\n * Defines a node (or polygon) within a group.\n *\n * @type {Object}\n * @property {number} id\n * @property {Array<number>} neighbours IDs of neighboring nodes.\n * @property {Array<number>} vertexIds\n * @property {Vector3} centroid\n * @property {Array<Array<number>>} portals Array of portals, each defined by two vertex IDs.\n * @property {boolean} closed\n * @property {number} cost\n */\nconst Node = {}; // jshint ignore:line\n\nexport { Pathfinding };\n","import {\r\n  Color,\r\n  Object3D,\r\n  LineBasicMaterial,\r\n  MeshBasicMaterial,\r\n  SphereBufferGeometry,\r\n  BoxGeometry,\r\n  Mesh,\r\n  SphereGeometry,\r\n  Geometry,\r\n  Vector3,\r\n  Line,\r\n} from 'three';\r\n\r\nconst colors = {\r\n  PLAYER: new Color( 0xee836f ).convertGammaToLinear( 2.2 ).getHex(),\r\n  TARGET: new Color( 0xdccb18 ).convertGammaToLinear( 2.2 ).getHex(),\r\n  PATH: new Color( 0x00a3af ).convertGammaToLinear( 2.2 ).getHex(),\r\n  WAYPOINT: new Color( 0x00a3af ).convertGammaToLinear( 2.2 ).getHex(),\r\n  CLAMPED_STEP: new Color( 0xdcd3b2 ).convertGammaToLinear( 2.2 ).getHex(),\r\n  CLOSEST_NODE: new Color( 0x43676b ).convertGammaToLinear( 2.2 ).getHex(),\r\n};\r\n\r\nconst OFFSET = 0.2;\r\n\r\n/**\r\n * Helper for debugging pathfinding behavior.\r\n */\r\nclass PathfindingHelper extends Object3D {\r\n  constructor () {\r\n    super();\r\n\r\n    this._playerMarker = new Mesh(\r\n      new SphereGeometry( 0.25, 32, 32 ),\r\n      new MeshBasicMaterial( { color: colors.PLAYER } )\r\n    );\r\n\r\n    this._targetMarker = new Mesh(\r\n      new BoxGeometry( 0.3, 0.3, 0.3 ),\r\n      new MeshBasicMaterial( { color: colors.TARGET } )\r\n    );\r\n    \r\n\r\n    this._nodeMarker = new Mesh(\r\n      new BoxGeometry( 0.1, 0.8, 0.1 ),\r\n      new MeshBasicMaterial( { color: colors.CLOSEST_NODE } )\r\n    );\r\n    \r\n\r\n    this._stepMarker = new Mesh(\r\n      new BoxGeometry( 0.1, 1, 0.1 ),\r\n      new MeshBasicMaterial( { color: colors.CLAMPED_STEP } )\r\n    );\r\n\r\n    this._pathMarker = new Object3D();\r\n\r\n    this._pathLineMaterial = new LineBasicMaterial( { color: colors.PATH, linewidth: 2 } ) ;\r\n    this._pathPointMaterial = new MeshBasicMaterial( { color: colors.WAYPOINT } );\r\n    this._pathPointGeometry = new SphereBufferGeometry( 0.08 );\r\n\r\n    this._markers = [\r\n      this._playerMarker,\r\n      this._targetMarker,\r\n      this._nodeMarker,\r\n      this._stepMarker,\r\n      this._pathMarker,\r\n    ];\r\n\r\n    this._markers.forEach( ( marker ) => {\r\n\r\n      marker.visible = false;\r\n\r\n      this.add( marker );\r\n\r\n    } );\r\n\r\n  }\r\n\r\n  /**\r\n   * @param {Array<Vector3>} path\r\n   * @return {this}\r\n   */\r\n  setPath ( path ) {\r\n\r\n    while ( this._pathMarker.children.length ) {\r\n\r\n      this._pathMarker.children[ 0 ].visible = false;\r\n      this._pathMarker.remove( this._pathMarker.children[ 0 ] );\r\n\r\n    }\r\n\r\n    path = [ this._playerMarker.position ].concat( path );\r\n\r\n    // Draw debug lines\r\n    const geometry = new Geometry();\r\n    for (let i = 0; i < path.length; i++) {\r\n      geometry.vertices.push( path[ i ].clone().add( new Vector3( 0, OFFSET, 0 ) ) );\r\n    }\r\n    this._pathMarker.add( new Line( geometry, this._pathLineMaterial ) );\r\n\r\n    for ( let i = 0; i < path.length - 1; i++ ) {\r\n\r\n      const node = new Mesh( this._pathPointGeometry, this._pathPointMaterial );\r\n      node.position.copy( path[ i ] );\r\n      node.position.y += OFFSET;\r\n      this._pathMarker.add( node );\r\n\r\n    }\r\n\r\n    this._pathMarker.visible = true;\r\n\r\n    return this;\r\n\r\n  }\r\n\r\n  /**\r\n   * @param {Vector3} position\r\n   * @return {this}\r\n   */\r\n  setPlayerPosition( position ) {\r\n\r\n    this._playerMarker.position.copy( position );\r\n    this._playerMarker.visible = true;\r\n    return this;\r\n\r\n  }\r\n\r\n  /**\r\n   * @param {Vector3} position\r\n   * @return {this}\r\n   */\r\n  setTargetPosition( position ) {\r\n\r\n    this._targetMarker.position.copy( position );\r\n    this._targetMarker.visible = true;\r\n    return this;\r\n\r\n  }\r\n\r\n  /**\r\n   * @param {Vector3} position\r\n   * @return {this}\r\n   */\r\n  setNodePosition( position ) {\r\n\r\n    this._nodeMarker.position.copy( position );\r\n    this._nodeMarker.visible = true;\r\n    return this;\r\n\r\n  }\r\n\r\n  /**\r\n   * @param {Vector3} position\r\n   * @return {this}\r\n   */\r\n  setStepPosition( position ) {\r\n\r\n    this._stepMarker.position.copy( position );\r\n    this._stepMarker.visible = true;\r\n    return this;\r\n\r\n  }\r\n\r\n  /**\r\n   * Hides all markers.\r\n   * @return {this}\r\n   */\r\n  reset () {\r\n\r\n    while ( this._pathMarker.children.length ) {\r\n\r\n      this._pathMarker.children[ 0 ].visible = false;\r\n      this._pathMarker.remove( this._pathMarker.children[ 0 ] );\r\n\r\n    }\r\n\r\n    this._markers.forEach( ( marker ) => {\r\n\r\n      marker.visible = false;\r\n\r\n    } );\r\n\r\n    return this;\r\n\r\n  }\r\n\r\n}\r\n\r\nexport { PathfindingHelper };\r\n"],"names":["const","let","Vector3","Geometry","Plane","Triangle","Color","super","Mesh","SphereGeometry","MeshBasicMaterial","BoxGeometry","LineBasicMaterial","SphereBufferGeometry","Line","i","Object3D"],"mappings":"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"}